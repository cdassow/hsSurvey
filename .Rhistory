}
plot(times,myw, xlab="time",ylab = "H", main = "Probability of H individuals over time with R0 = 2")
R0=2
#adding w for dH/dtau
myw=rep(0,1000)
myx=rep(0,1000)
myy=rep(0,1000)
myz=rep(0,1000)
times = rep(0,1000)
myx[1] = 1090/1100
myy[1] = 10/1100
myw[1]= 5/1100
myz[1] = 0
r=0.5
p=0.25
dtau = 0.01
ntime=1000
for(itime in 2:ntime){
deriv = - R0 * myx[itime-1] * myy[itime-1]
myx[itime] = myx[itime-1] + deriv * dtau
deriv = - deriv - myy[itime-1]
myy[itime] = myy[itime-1] + deriv * dtau
deriv = myy[itime-1] * p - r * myw[itime]
myw[itime]= myw[itime-1]+ deriv * dtau
deriv = myy[itime-1] + myw[itime-1] * r
myz[itime] = myz[itime-1] + deriv * dtau
times[itime] = times[itime-1] + dtau
}
plot(times,myw, xlab="time",ylab = "H", main = "Probability of H individuals over time with R0 = 2")
R0=2
#adding w for dH/dtau
myw=rep(0,1000)
myx=rep(0,1000)
myy=rep(0,1000)
myz=rep(0,1000)
times = rep(0,1000)
myx[1] = 1090/1100
myy[1] = 10/1100
myw[1]= 5/1100
myz[1] = 0
r=0.5
p=0.25
dtau = 0.01
ntime=1000
for(itime in 2:ntime){
deriv = - R0 * myx[itime-1] * myy[itime-1]
myx[itime] = myx[itime-1] + deriv * dtau
deriv = - deriv - myy[itime-1]
myy[itime] = myy[itime-1] + deriv * dtau
deriv = myy[itime-1] * p - r * myw[itime]
myw[itime]= myw[itime-1]+ deriv * dtau
deriv = myy[itime-1] + myw[itime-1] * r
myz[itime] = myz[itime-1] + deriv * dtau
times[itime] = times[itime-1] + dtau
}
plot(times,myw, xlab="time",ylab = "H", main = "Probability of H individuals over time with R0 = 2")
plot(times,myw, xlab="time",ylab = "H", main = "Probability of H individuals over time with R0 = 2")
R0=2
#adding w for dH/dtau
myw=rep(0,1000)
myx=rep(0,1000)
myy=rep(0,1000)
myz=rep(0,1000)
times = rep(0,1000)
myx[1] = 1090/1100
myy[1] = 10/1100
myw[1]= 5/1100
myz[1] = 0
r=0.5
p=0.25
dtau = 0.01
ntime=1000
for(itime in 2:ntime){
deriv = - R0 * myx[itime-1] * myy[itime-1]
myx[itime] = myx[itime-1] + deriv * dtau
deriv = - deriv - myy[itime-1] - myw[itime-1]* p
myy[itime] = myy[itime-1] + deriv * dtau
deriv = myy[itime-1] * p - r * myw[itime-1]
myw[itime]= myw[itime-1]+ deriv * dtau
deriv = myy[itime-1] + myw[itime-1] * r
myz[itime] = myz[itime-1] + deriv * dtau
times[itime] = times[itime-1] + dtau
}
plot(times,myw, xlab="time",ylab = "H", main = "Probability of H individuals over time with R0 = 2")
#Dynamic modeling Hw 1
B<- 50 # this is also beta - the transmission rate of infected to non-infected ppl
gamma<- 0.2 # rate at which infected ppl recover
p<- 0.8 # prop that if infected you are hospitalized
r<-0.1 #rate of recovery/death if in the hospital
I=rep(0,1000)
S=rep(0,1000)
H=rep(0,1000)
R=rep(0,1000)
# N =1000
I[1]<-200
S[1]<-789
H[1]<-10
R[1]<-1
ntime=1000
times = seq(1,1000,1)
for(itime in 2:ntime){
S[itime] <- -B*S[itime-1]*I[itime-1]
I[itime] <- -B*S[itime-1]*I[itime-1] - gamma*I[itime-1] - p * H[itime-1]
H[itime] <- p * H[itime-1] - r * H[itime-1]
R[itime] <- gamma * I[itime-1] + r * H[itime-1]
}
plot(times, H, main ="Number of People in the Hospital", ylab= "H", xlab = "time")
B<- 50 # this is also beta - the transmission rate of infected to non-infected ppl
gamma<- 0.2 # rate at which infected ppl recover
B<- 50 # this is also beta - the transmission rate of infected to non-infected ppl
gamma<- 0.2 # rate at which infected ppl recover
p<- 0.8 # prop that if infected you are hospitalized
r<-0.1 #rate of recovery/death if in the hospital
I=rep(0,1000)
S=rep(0,1000)
H=rep(0,1000)
R=rep(0,1000)
# N =1000
I[1]<-200
S[1]<-789
H[1]<-10
R[1]<-1
ntime=1000
times = seq(1,1000,1)
for(itime in 2:ntime){
S[itime] <- -B*S[itime-1]*I[itime-1]
I[itime] <- -B*S[itime-1]*I[itime-1] - gamma*I[itime-1] - p * H[itime-1]
H[itime] <- p * H[itime-1] - r * H[itime-1]
R[itime] <- gamma * I[itime-1] + r * H[itime-1]
}
plot(times, H, main ="Number of People in the Hospital", ylab= "H", xlab = "time")
plot(times, I)
plot(times, R)
B<- 50 # this is also beta - the transmission rate of infected to non-infected ppl
gamma<- 0.01 # rate at which infected ppl recover
p<- 0.8 # prop that if infected you are hospitalized
r<-0.1 #rate of recovery/death if in the hospital
I=rep(0,1000)
S=rep(0,1000)
H=rep(0,1000)
R=rep(0,1000)
# N =1000
I[1]<-200
S[1]<-789
H[1]<-10
R[1]<-1
ntime=1000
times = seq(1,1000,1)
for(itime in 2:ntime){
S[itime] <- -B*S[itime-1]*I[itime-1]
I[itime] <- -B*S[itime-1]*I[itime-1] - gamma*I[itime-1] - p * H[itime-1]
H[itime] <- p * H[itime-1] - r * H[itime-1]
R[itime] <- gamma * I[itime-1] + r * H[itime-1]
}
plot(times, H, main ="Number of People in the Hospital", ylab= "H", xlab = "time")
plot(times, I)
plot(times, R)
B<- 500 # this is also beta - the transmission rate of infected to non-infected ppl
gamma<- 0.01 # rate at which infected ppl recover
p<- 0.8 # prop that if infected you are hospitalized
r<-0.1 #rate of recovery/death if in the hospital
I=rep(0,1000)
S=rep(0,1000)
H=rep(0,1000)
R=rep(0,1000)
# N =1000
I[1]<-200
S[1]<-789
H[1]<-10
R[1]<-1
ntime=1000
times = seq(1,1000,1)
for(itime in 2:ntime){
S[itime] <- -B*S[itime-1]*I[itime-1]
I[itime] <- -B*S[itime-1]*I[itime-1] - gamma*I[itime-1] - p * H[itime-1]
H[itime] <- p * H[itime-1] - r * H[itime-1]
R[itime] <- gamma * I[itime-1] + r * H[itime-1]
}
plot(times, H, main ="Number of People in the Hospital", ylab= "H", xlab = "time")
B<- 50 # this is also beta - the transmission rate of infected to non-infected ppl
gamma<- 0.01 # rate at which infected ppl recover
p<- 0.8 # prop that if infected you are hospitalized
r<-0.01 #rate of recovery/death if in the hospital
I=rep(0,1000)
S=rep(0,1000)
H=rep(0,1000)
R=rep(0,1000)
# N =1000
I[1]<-200
S[1]<-789
H[1]<-10
R[1]<-1
ntime=1000
times = seq(1,1000,1)
for(itime in 2:ntime){
S[itime] <- -B*S[itime-1]*I[itime-1]
I[itime] <- -B*S[itime-1]*I[itime-1] - gamma*I[itime-1] - p * H[itime-1]
H[itime] <- p * H[itime-1] - r * H[itime-1]
R[itime] <- gamma * I[itime-1] + r * H[itime-1]
}
plot(times, H, main ="Number of People in the Hospital", ylab= "H", xlab = "time")
B<- 50 # this is also beta - the transmission rate of infected to non-infected ppl
gamma<- 0.1 # rate at which infected ppl recover
p<- 0.9 # prop that if infected you are hospitalized
r<-0.1 #rate of recovery/death if in the hospital
I=rep(0,1000)
S=rep(0,1000)
H=rep(0,1000)
R=rep(0,1000)
# N =1000
I[1]<-200
S[1]<-789
H[1]<-10
R[1]<-1
ntime=1000
times = seq(1,1000,1)
for(itime in 2:ntime){
S[itime] <- -B*S[itime-1]*I[itime-1]
I[itime] <- -B*S[itime-1]*I[itime-1] - gamma*I[itime-1] - p * H[itime-1]
H[itime] <- p * H[itime-1] - r * H[itime-1]
R[itime] <- gamma * I[itime-1] + r * H[itime-1]
}
plot(times, H, main ="Number of People in the Hospital", ylab= "H", xlab = "time")
B<- 50 # this is also beta - the transmission rate of infected to non-infected ppl
gamma<- 0.1 # rate at which infected ppl recover
p<- 0.3 # prop that if infected you are hospitalized
r<-0.1 #rate of recovery/death if in the hospital
I=rep(0,1000)
S=rep(0,1000)
H=rep(0,1000)
R=rep(0,1000)
# N =1000
I[1]<-200
S[1]<-789
H[1]<-10
R[1]<-1
ntime=1000
times = seq(1,1000,1)
for(itime in 2:ntime){
S[itime] <- -B*S[itime-1]*I[itime-1]
I[itime] <- -B*S[itime-1]*I[itime-1] - gamma*I[itime-1] - p * H[itime-1]
H[itime] <- p * H[itime-1] - r * H[itime-1]
R[itime] <- gamma * I[itime-1] + r * H[itime-1]
}
plot(times, H, main ="Number of People in the Hospital", ylab= "H", xlab = "time")
setwd("C:/Users/Camille/Desktop/Fishscapes/hsSurvey")
# load function to load data from google drive
source("gdriveURL.R")
library(dplyr)
#add in Building density
buildDensity2018=gdriveURL("https://drive.google.com/open?id=11lPPduqiXIxz00fm6xxFzUA8u9nCOBnN")
View(buildDensity2018)
Arrow<-grep(buildDensity2018$WBIC=="1541500")
Arrow<-grep(buildDensity2018$WBIC=="1541500")
Arrow<-grep(buildDensity2018$WBIC=="1541500",)
Arrow<-grep(,buildDensity2018$WBIC=="1541500")
Arrow<-buildDensity2018$WBIC=="1541500"
Arrow
View(buildDensity2018)
buildDensity2018[buildDensity2018$WBIC=="1541500"]
buildDensity2018[buildDensity2018$WBIC=="1541500",]
buildDensity2018[buildDensity2018$WBIC=="1835300",]
setwd("C:/Users/Camille/Desktop/Fishscapes/hsSurvey")
# load function to load data from google drive
source("gdriveURL.R")
library(dplyr)
######## angling CPUE
# load creel data from google drive
creel1=gdriveURL("https://drive.google.com/open?id=1lxUd742QZMXDQunyFBnENKMYZ1XNM_Pc")
creel2=gdriveURL("https://drive.google.com/open?id=1UYhbGH28WXjmi-4BzhfwO4KYwrBCNO2Q")
creel=rbind(creel1,creel2)
# reduce to columns we care about
creel=creel[,c(1,3,6,12,18,25:26,30,36,38)]
# calculate effort
# add zeroes to times with only 2 or 3 digits
creel$timeStart[nchar(creel$timeStart)==3]=paste("0",creel$timeStart[nchar(creel$timeStart)==3],sep="")
creel$timeStart[nchar(creel$timeStart)==2]=paste("00",creel$timeStart[nchar(creel$timeStart)==2],sep="")
creel$timeStart[creel$timeStart=="0"]="0000"
creel=creel[creel$timeStart!="1",]  # 4 entries with "1", so we don't know start time
creel$timeEnd[nchar(creel$timeEnd)==3]=paste("0",creel$timeEnd[nchar(creel$timeEnd)==3],sep="")
creel$timeEnd[nchar(creel$timeStart)==2]=paste("00",creel$timeEnd[nchar(creel$timeEnd)==2],sep="")
creel$timeEnd[creel$timeEnd=="0"]="0000"
creel$boatHrs=0
# remove rows when end time is less than start time (assumes the boat was out over midnight)
creel=creel[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M"),]
# calculate difference of time in hours for rows where end time is greater than start time (fishing occurred in one day only)
creel$boatHrs[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M")]=as.numeric(difftime(strptime(creel$timeEnd[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M")],format="%H%M"),strptime(creel$timeStart[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M")],format="%H%M"),units="hours"))
# removing rows with a non-zero notFishingAmt because we don't know what it means to be non-zero...
creel=creel[creel$notFishingAmt==0,]
# remove rows with non-integer anglersAmt
creel=creel[!grepl(".",creel$anglersAmt,fixed=TRUE),]
# remove rows with anglersAmt above 10? (arbitrary choice for now)
creel=creel[creel$anglersAmt<=10,]
# get angler hours of effort from party size and boat hours
creel$anglerHrs=creel$boatHrs*creel$anglersAmt
# remove rows with no species code
creel=creel[!is.na(creel$fishSpeciesCode),]
# remove rows with NA for caughtAmt
creel=creel[!is.na(creel$caughtAmt),]
# remove no effort (anglerHrs==0) rows
creel=creel[creel$anglerHrs>0,]
# calculate angling CPUE
creel$anglingCPUE=creel$caughtAmt/creel$anglerHrs
# removing instances of CPUE >=30 (arbitrary...)
creel=creel[creel$anglingCPUE<30,]
# calculate average angling CPUE and sample size for each lake-year-species combination
lake_yearCPUE=creel %>%
group_by(WBIC,fishSpeciesCode,surveyYear,county) %>%
summarize(meanCPUE=mean(anglingCPUE),
N=n())
lake_yearCPUE=as.data.frame(lake_yearCPUE)
####### electrofishing abundance
bassEF=gdriveURL("https://drive.google.com/open?id=11v8FbT2wnKx_CqUfxu_V9r_8fyCfcdD2")
bassEF=bassEF[,c(1,3,5,13,19,27:29)]
bassEF$CPEkm=bassEF$CPEmile/1.60934   # convert fish per mile to fish per km
bassEF$distanceShockedKm=bassEF$distanceShockedMiles*0.621371 # convert miles to km
lake_yearBASSef= bassEF %>%
group_by(WBIC,species,surveyYear,county) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearBASSef=as.data.frame(lake_yearBASSef)
panEF=gdriveURL("https://drive.google.com/open?id=1QIqCBQ9gbOgRFUJQbnokwwTZJi5VZZIR")
panEF=panEF[,c(1,3,5,13,19,25:27)]
panEF$CPEkm=panEF$CPEmile/1.60934   # convert fish per mile to fish per km
panEF$distanceShockedKm=panEF$distanceShockedMiles*0.621371 # convert miles to km
lake_yearPANef= panEF %>%
group_by(WBIC,species,surveyYear,county) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearPANef=as.data.frame(lake_yearPANef)
walleyeEF=gdriveURL("https://drive.google.com/open?id=1DPRROWv6Cf_fP6Z-kE9ZgUfdf_F_jSNT")
walleyeEF=walleyeEF[,c(1,3,5,13,19,23:24,27)]
walleyeEF$CPEkm=walleyeEF$CPEmile/1.60934   # convert fish per mile to fish per km
walleyeEF$distanceShockedKm=walleyeEF$distanceShockedMiles*0.621371 # convert miles to km
#remove commas from total fish caught
walleyeEF$totalNumberCaughtFish=as.numeric(gsub(",","",walleyeEF$totalNumberCaughtFish))
lake_yearWALLef= walleyeEF %>%
group_by(WBIC,species,surveyYear,county) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearWALLef=as.data.frame(lake_yearWALLef)
##### merge data sets from angling CPUE and electrofishing CPUE to get exact lake-year matches
# convert fishSpeciesCode in lake_yearCPUE to species (name from ef stuff)
lake_yearCPUE$species=""
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="X22"]="WALLEYE"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W11"]="SMALLMOUTH BASS"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W12"]="LARGEMOUTH BASS"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="X15"]="YELLOW PERCH"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W14"]="BLACK CRAPPIE"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W09"]="BLUEGILL"
# trim species without EF data (can we get other species EF data?)
lake_yearCPUE=lake_yearCPUE[lake_yearCPUE$species!="",]
bassJoin=left_join(lake_yearBASSef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear", "county"="county"))
bassJoin=bassJoin[!is.na(bassJoin$meanCPUE),]
panJoin=left_join(lake_yearPANef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear", "county"="county"))
panJoin=panJoin[!is.na(panJoin$meanCPUE),]
wallJoin=left_join(lake_yearWALLef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear", "county"="county"))
wallJoin=wallJoin[!is.na(wallJoin$meanCPUE),]
table(lake_yearCPUE$species)
nrow(lake_yearBASSef)
nrow(bassJoin)
nrow(lake_yearPANef)
nrow(panJoin)
nrow(lake_yearWALLef)
nrow(wallJoin)
library(ggplot2)
NTLBuild=gdriveURL("https://drive.google.com/open?id=1wAehUlN5l-hAHiSuewAbcGjhOBaf4n0f")
colnames(NTLBuild)
View(NTLBuild)
NTLBuild=gdriveURL("https://docs.google.com/spreadsheets/d/1dXRRacXIEghckoVCPwu2WY05t6vkdUvn1_uSJ2PU_og/edit?usp=sharing")
NTLBuild=gdriveURL("https://drive.google.com/open?id=1dXRRacXIEghckoVCPwu2WY05t6vkdUvn1_uSJ2PU_og")
NTLBuild=gdriveURL("https://drive.google.com/open?id=1dXRRacXIEghckoVCPwu2WY05t6vkdUvn1_uSJ2PU_og")
NTLBuild=gdriveURL("https://drive.google.com/open?id=1dXRRacXIEghckoVCPwu2WY05t6vkdUvn1_uSJ2PU_og")
NTLBuild=gdriveURL("https://drive.google.com/open?id=1dXRRacXIEghckoVCPwu2WY05t6vkdUvn1_uSJ2PU_og")
NTLBuild=gdriveURL("https://drive.google.com/open?id=1wAehUlN5l-hAHiSuewAbcGjhOBaf4n0f")
View(NTLBuild)
NTLBuild=gdriveURL("https://drive.google.com/open?id=1wAehUlN5l-hAHiSuewAbcGjhOBaf4n0f")
library(readxl)
NTLBuildDensData_2001_2004_ <- read_excel("NTLBuildDensData(2001-2004).xlsx")
View(NTLBuildDensData_2001_2004_)
library(readxl)
NTLBuild<- read_excel("NTLBuildDensData(2001-2004).xlsx")
#joining building density to bass catch + abund info
bassbuildJoin=left_join(bassJoin,NTLBuild,by="WBIC","surveyYear")
colnames(NTLBuild)
#fixing column names to join tables
rename(NTLBuild,"wbic"="WBIC")
#fixing column names to join tables
rename(NTLBuild,"WBIC"="wbic")
colnames(NTLBuild)
#fixing column names to join tables
rename(NTLBuild, WBIC=wbic)
colnames(NTLBuild)
#fixing column names to join tables
rename(NTLBuild, WBIC = wbic)
colnames(NTLBuild)
library(dplyr)
#fixing column names to join tables
rename(NTLBuild, WBIC = wbic)
library(readxl)
NTLBuild<- read_excel("NTLBuildDensData(2001-2004).xlsx")
#fixing column names to join tables
NTLBuild$WBIC=NTLBuild$wbic
View(NTLBuild)
NTLBuild<-NTLBuild[,c(1:6,8:33)]
#joining building density to bass catch + abund info
bassbuildJoin=left_join(bassJoin,NTLBuild,by="WBIC","surveyYear")
bassbuildJoin=bassbuildJoin[!is.na(bassbuildJoin$buildings_per_km),]
View(bassbuildJoin)
NTLBuild<- read_excel("NTLBuildDensData(2001-2004).xlsx")
#fixing column names to join tables
NTLBuild$WBIC=NTLBuild$wbic
NTLBuild<-NTLBuild[,c(1:6,8:33)]
#joining building density to bass catch + abund info
bassbuildJoin=left_join(bassJoin,NTLBuild,by="surveyYear")
colnames(NTLBuild)
colnames(bassJoin)
NTLBuild<- read_excel("NTLBuildDensData(2001-2004).xlsx")
#fixing column names to join tables
NTLBuild$WBIC=NTLBuild$wbic
NTLBuild$surveyYear=NTLBuild$survey_year
View(NTLBuild)
NTLBuild<-NTLBuild[,c(1:4,8:33)]
#joining building density to bass catch + abund info
bassbuildJoin=left_join(bassJoin,NTLBuild,by="surveyYear")
#fixing column names to join tables
NTLBuild$WBIC=NTLBuild$wbic
NTLBuild$surveyYear=NTLBuild$survey_year
NTLBuild<-NTLBuild[,c(1:4,8:33)]
#fixing column names to join tables
NTLBuild$WBIC=NTLBuild$wbic
NTLBuild$surveyYear=NTLBuild$survey_year
View(NTLBuild)
library(readxl)
NTLBuild<- read_excel("NTLBuildDensData(2001-2004).xlsx")
#fixing column names to join tables
NTLBuild$WBIC=NTLBuild$wbic
NTLBuild$surveyYear=NTLBuild$survey_year
NTLBuild<-NTLBuild[,c(1:4,8:34)]
#joining building density to bass catch + abund info
bassbuildJoin=left_join(bassJoin,NTLBuild,by="surveyYear")
bassbuildJoin=bassbuildJoin[!is.na(bassbuildJoin$buildings_per_km),]
NTLBuild<- read_excel("NTLBuildDensData(2001-2004).xlsx")
#fixing column names to join tables
NTLBuild$WBIC=NTLBuild$wbic
NTLBuild$surveyYear=NTLBuild$survey_year
NTLBuild<-NTLBuild[,c(1:4,8:34)]
#joining building density to bass catch + abund info
bassbuildJoin=left_join(bassJoin,NTLBuild,by="surveyYear","WBIC")
View(bassbuildJoin)
View(bassJoin)
#joining building density to bass catch + abund info
bassbuildJoin=left_join(bassJoin,NTLBuild,by="surveyYear","WBIC")
bassbuildJoin=bassbuildJoin[!is.na(bassbuildJoin$buildings_per_km),]
View(bassbuildJoin)
library(readxl)
NTLBuild<- read_excel("NTLBuildDensData(2001-2004).xlsx")
#fixing column names to join tables
NTLBuild$WBIC=NTLBuild$wbic
NTLBuild$surveyYear=NTLBuild$survey_year
NTLBuild<-NTLBuild[,c(1:4,8:34)]
dim(NTLBuild)
dim(bassJoin)
#joining building density to bass catch + abund info
bassbuildJoin=left_join(bassJoin,NTLBuild, by="surveyYear","WBIC")
bassbuildJoin=bassbuildJoin[!is.na(bassbuildJoin$buildings_per_km),]
bassJoin=left_join(lake_yearBASSef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear", "county"="county"))
bassJoin=bassJoin[!is.na(bassJoin$meanCPUE),]
#building density numbers for walleye lake yr observations
wallbuildJoin=left_join(wallJoin,NTLBuild,by="WBIC","surveyYear")
wallbuildJoin=wallbuildJoin[!is.na(wallbuildJoin$buildings_per_km),]
#joining building density to bass catch + abund info
bassbuildJoin=left_join(bassJoin,NTLBuild, by="WBIC","surveyYear")
bassbuildJoin=bassbuildJoin[!is.na(bassbuildJoin$buildings_per_km),]
#builing density numbers for panfish lake yr observations
panbuildJoin=left_join(panJoin,NTLBuild,by="WBIC","surveyYear")
panbuildJoin=panbuildJoin[!is.na(panbuildJoin$buildings_per_km]
panbuildJoin=panbuildJoin[!is.na(panbuildJoin$buildings_per_km)
panbuildJoin=panbuildJoin[!is.na(panbuildJoin$buildings_per_km)]
#builing density numbers for panfish lake yr observations
panbuildJoin=left_join(panJoin,NTLBuild,by="WBIC","surveyYear")
panbuildJoin=panbuildJoin[!is.na(panbuildJoin$buildings_per_km)]
panbuildJoin=panbuildJoin[!is.na(panbuildJoin$buildings_per_km)]
panbuildJoin=panbuildJoin[!is.na(panbuildJoin$buildings_per_km),]
fit4<-glm(bassbuildJoin$logCPUE~bassbuildJoin$logAbun+bassbuildJoin$logAbun:bassbuildJoin$buildings_per_km)
bassJoin$logCPUE=log(bassJoin$meanCPUE)
bassJoin$logAbun=log(bassJoin$meanEF_CPEkm)
bassJoin<- bassJoin[is.na(bassJoin$logCPUE)==F,]
bassJoin<- bassJoin[bassJoin$logCPUE!=-Inf,]
wallJoin$logCPUE=log(wallJoin$meanCPUE)
wallJoin$logAbun=log(wallJoin$meanEF_CPEkm)
wallJoin<- wallJoin[wallJoin$logCPUE!=-Inf,]
panJoin$logCPUE=log(panJoin$meanCPUE)
panJoin$logAbun=log(panJoin$meanEF_CPEkm)
panJoin<- panJoin[panJoin$logCPUE!=-Inf,]
fit4<-glm(bassbuildJoin$logCPUE~bassbuildJoin$logAbun+bassbuildJoin$logAbun:bassbuildJoin$buildings_per_km)
summary(fit4)#nothing significant
fit4<-glm(bassbuildJoin$logCPUE~bassbuildJoin$logAbun+bassbuildJoin$logAbun:bassbuildJoin$buildings_per_km)
install.packages(deSolve)
install.packages("deSolve")
