#b)
rd = 1
Nsim = 100
N_mean = numeric(Nsim)
S_D = numeric(Nsim)
for (j in 1:Nsim){
stdev = sample(seq(0.1,15,0.5),1)
S_D[j] = stdev
Kstart = 100
time = 1:20
K = numeric(20)
for(i in 1:20) {
K[i] = Kstart + rnorm(1, m=0, sd=stdev)
}
N_mean[j] = mean(dlogistic(K, rd, 1, 20))
}
plot(S_D, N_mean)
plot(xlab="standard deviation",ylab="Mean",S_D, N_mean)
setwd("C:/Users/Camille/Desktop/Fishscapes/hsSurvey")
# load function to load data from google drive
source("gdriveURL.R")
library(dplyr)
######## angling CPUE
# load creel data from google drive
creel1=gdriveURL("https://drive.google.com/open?id=1lxUd742QZMXDQunyFBnENKMYZ1XNM_Pc")
creel2=gdriveURL("https://drive.google.com/open?id=1UYhbGH28WXjmi-4BzhfwO4KYwrBCNO2Q")
creel=rbind(creel1,creel2)
# reduce to columns we care about
creel=creel[,c(3,6,12,18,25:26,30,36,38)]
# calculate effort
# add zeroes to times with only 2 or 3 digits
creel$timeStart[nchar(creel$timeStart)==3]=paste("0",creel$timeStart[nchar(creel$timeStart)==3],sep="")
creel$timeStart[nchar(creel$timeStart)==2]=paste("00",creel$timeStart[nchar(creel$timeStart)==2],sep="")
creel$timeStart[creel$timeStart=="0"]="0000"
creel=creel[creel$timeStart!="1",]  # 4 entries with "1", so we don't know start time
creel$timeEnd[nchar(creel$timeEnd)==3]=paste("0",creel$timeEnd[nchar(creel$timeEnd)==3],sep="")
creel$timeEnd[nchar(creel$timeStart)==2]=paste("00",creel$timeEnd[nchar(creel$timeEnd)==2],sep="")
creel$timeEnd[creel$timeEnd=="0"]="0000"
creel$boatHrs=0
# remove rows when end time is less than start time (assumes the boat was out over midnight)
creel=creel[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M"),]
# calculate difference of time in hours for rows where end time is greater than start time (fishing occurred in one day only)
creel$boatHrs[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M")]=as.numeric(difftime(strptime(creel$timeEnd[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M")],format="%H%M"),strptime(creel$timeStart[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M")],format="%H%M"),units="hours"))
# removing rows with a non-zero notFishingAmt because we don't know what it means to be non-zero...
creel=creel[creel$notFishingAmt==0,]
# remove rows with non-integer anglersAmt
creel=creel[!grepl(".",creel$anglersAmt,fixed=TRUE),]
# remove rows with anglersAmt above 10? (arbitrary choice for now)
creel=creel[creel$anglersAmt<=10,]
# get angler hours of effort from party size and boat hours
creel$anglerHrs=creel$boatHrs*creel$anglersAmt
# remove rows with no species code
creel=creel[!is.na(creel$fishSpeciesCode),]
# remove rows with NA for caughtAmt
creel=creel[!is.na(creel$caughtAmt),]
# remove no effort (anglerHrs==0) rows
creel=creel[creel$anglerHrs>0,]
# calculate angling CPUE
creel$anglingCPUE=creel$caughtAmt/creel$anglerHrs
# removing instances of CPUE >=30 (arbitrary...)
creel=creel[creel$anglingCPUE<30,]
# calculate average angling CPUE and sample size for each lake-year-species combination
lake_yearCPUE=creel %>%
group_by(WBIC,fishSpeciesCode,surveyYear) %>%
summarize(meanCPUE=mean(anglingCPUE),
N=n())
lake_yearCPUE=as.data.frame(lake_yearCPUE)
####### electrofishing abundance
bassEF=gdriveURL("https://drive.google.com/open?id=11v8FbT2wnKx_CqUfxu_V9r_8fyCfcdD2")
bassEF=bassEF[,c(3,5,13,19,27:29)]
bassEF=bassEF[,c(3,5,13,19,27:29)]
bassEF$CPEkm=bassEF$CPEmile/1.60934   # convert fish per mile to fish per km
####### electrofishing abundance
bassEF=gdriveURL("https://drive.google.com/open?id=11v8FbT2wnKx_CqUfxu_V9r_8fyCfcdD2")
bassEF=bassEF[,c(3,5,13,19,27:29)]
bassEF$CPEkm=bassEF$CPEmile/1.60934   # convert fish per mile to fish per km
bassEF$distanceShockedKm=bassEF$distanceShockedMiles*0.621371 # convert miles to km
lake_yearBASSef= bassEF %>%
group_by(WBIC,species,surveyYear) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
N=n())
lake_yearBASSef=as.data.frame(lake_yearBASSef)
panEF=gdriveURL("https://drive.google.com/open?id=1QIqCBQ9gbOgRFUJQbnokwwTZJi5VZZIR")
panEF=panEF[,c(3,5,13,19,25:27)]
panEF$CPEkm=panEF$CPEmile/1.60934   # convert fish per mile to fish per km
panEF$distanceShockedKm=panEF$distanceShockedMiles*0.621371 # convert miles to km
lake_yearPANef= panEF %>%
group_by(WBIC,species,surveyYear) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
N=n())
lake_yearPANef=as.data.frame(lake_yearPANef)
walleyeEF=gdriveURL("https://drive.google.com/open?id=1DPRROWv6Cf_fP6Z-kE9ZgUfdf_F_jSNT")
walleyeEF=walleyeEF[,c(3,5,13,19,23:24,27)]
walleyeEF$CPEkm=walleyeEF$CPEmile/1.60934   # convert fish per mile to fish per km
walleyeEF$distanceShockedKm=walleyeEF$distanceShockedMiles*0.621371 # convert miles to km
#remove commas from total fish caught
walleyeEF$totalNumberCaughtFish=as.numeric(gsub(",","",walleyeEF$totalNumberCaughtFish))
lake_yearWALLef= walleyeEF %>%
group_by(WBIC,species,surveyYear) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
N=n())
lake_yearWALLef=as.data.frame(lake_yearWALLef)
##### merge data sets from angling CPUE and electrofishing CPUE to get exact lake-year matches
# convert fishSpeciesCode in lake_yearCPUE to species (name from ef stuff)
lake_yearCPUE$species=""
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="X22"]="WALLEYE"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W11"]="SMALLMOUTH BASS"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W12"]="LARGEMOUTH BASS"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="X15"]="YELLOW PERCH"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W14"]="BLACK CRAPPIE"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W09"]="BLUEGILL"
# trim species without EF data (can we get other species EF data?)
lake_yearCPUE=lake_yearCPUE[lake_yearCPUE$species!="",]
bassJoin=left_join(lake_yearBASSef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear"))
bassJoin=bassJoin[!is.na(bassJoin$meanCPUE),]
panJoin=left_join(lake_yearPANef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear"))
panJoin=panJoin[!is.na(panJoin$meanCPUE),]
wallJoin=left_join(lake_yearWALLef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear"))
wallJoin=wallJoin[!is.na(wallJoin$meanCPUE),]
table(lake_yearCPUE$species)
nrow(lake_yearBASSef)
nrow(bassJoin)
nrow(lake_yearPANef)
nrow(panJoin)
nrow(lake_yearWALLef)
nrow(wallJoin)
library(ggplot2)
#ploting and colors based on wbic, for bass 1-4 plots
ggplot(data=bassJoin,aes(x=bassJoin$meanEF_CPEkm,y=bassJoin$meanCPUE))+
geom_point(aes(color=WBIC))
#smooth line making trendline of observations
ggplot(data=bassJoin,aes(x=bassJoin$meanEF_CPEkm,y=bassJoin$meanCPUE))+
geom_smooth(model=lm)
#connecting with line
ggplot(data=bassJoin,aes(x=bassJoin$meanEF_CPEkm,y=bassJoin$meanCPUE))+
geom_line()
#color coded by LMB or SMB
ggplot(data=bassJoin,aes(x=bassJoin$meanEF_CPEkm,y=bassJoin$meanCPUE))+
geom_point(aes(color=species))+theme(legend.position = "right")
#ploting for walleye population
ggplot(data=wallJoin,aes(x=wallJoin$meanEF_CPEkm,y=wallJoin$meanCPUE))+
geom_smooth(model=lm)
ggplot(data=wallJoin,aes(x=wallJoin$meanEF_CPEkm,y=wallJoin$meanCPUE))+
geom_line()
ggplot(data=wallJoin,aes(x=wallJoin$meanEF_CPEkm,y=wallJoin$meanCPUE))+
geom_point()
ggplot(data=panJoin,aes(x=panJoin$meanEF_CPEkm,y=panJoin$meanCPUE))+
geom_point(aes(color=species))+theme(legend.position = "right")
#creating log CPUE and log N columns
bassJoin$logCPUE=log(bassJoin$meanCPUE)
bassJoin$logAbun=log(bassJoin$meanEF_CPEkm)
bassJoin<- bassJoin[is.na(bassJoin$logCPUE)==F,]
bassJoin<- bassJoin[bassJoin$logCPUE!=-Inf,]
#general linear model for bass, using glm function
fit1<-glm(bassJoin$logCPUE~bassJoin$logAbun)
summary(fit1)
#ploting model with fit line
plot(x=bassJoin$logAbun,y=bassJoin$logCPUE)
abline(fit1)
#model for panfish
fit2<-glm(panJoin$logCPUE~panJoin$logAbun)
unique(panJoin$logCPUE)
head(panJoin)
panJoin$logCPUE=log(panJoin$meanCPUE)
panJoin$logAbun=log(panJoin$meanEF_CPEkm)
#model for panfish
fit2<-glm(panJoin$logCPUE~panJoin$logAbun)
unique(panJoin$logCPUE)
panJoin<- panJoin[panJoin$logCPUE!=-Inf,]
#model for panfish
fit2<-glm(panJoin$logCPUE~panJoin$logAbun)
summary(fit1)
summary(fit2)
#ploting model with fit line
plot(x=panJoin$logAbun,y=panJoin$logCPUE)
abline(fit2)
wallJoin$logCPUE=log(wallJoin$meanCPUE)
wallJoin$logAbun=log(wallJoin$meanEF_CPEkm)
# glmodel for walleye
fit3<-glm(wallJoin$logCPUE~wallJoin$logAbun)
unique(wallJoin$logCPUE)
wallJoin$logCPUE=log(wallJoin$meanCPUE)
wallJoin$logAbun=log(wallJoin$meanEF_CPEkm)
wallJoin<- wallJoin[wallJoin$logCPUE!=-Inf,]
# glmodel for walleye
fit3<-glm(wallJoin$logCPUE~wallJoin$logAbun)
summary(fit3)
#ploting model with fit line bass log transformed abund. and CPUE
plot(x=wallJoin$logAbun,y=wallJoin$logCPUE)
abline(fit3)
betas=numeric(1000) #betas from model fit to simulated data
ps=numeric(1000) #difference in AIC values between the simulated data model fit and the experimental data model fit
View(bassJoin)
#make d the dataframe you want
d=bassJoin
z=d[!duplicated(d$meanEF_CPEkm),]
agg_logCPUE=log(z$meanCPUE)
agg_logN=log(z$meanEF_CPEkm)
aggFit_wLK=glm(agg_logCPUE~agg_logN)
summary(aggFit_wLK)
View(z)
for(i in 1:1000){
pe=rlnorm(n=length(z$meanEF_CPEkm), meanlog = log(z$meanEF_CPEkm), sdlog = log((z$meanEF_CPE.ucl-z$meanEF_CPEkm.lcl)/4)) #rlnorm from chpt 14-45 of RMark book
pe[1]=352 #becuase our first PE doesn't have CIs it always estimates a NaN so I just set it back to the point estimate. This is also why you get warnings when you run the loop.
fit=glm(agg_logCPUE ~ log(pe)+z$meanCPUE)
betas[i]=fit$coefficients[2]
comp=abs(fit$aic - aggFit_wLK$aic)
ps[i]=comp
}
View(z)
for(i in 1:1000){
pe=rlnorm(n=length(z$meanEF_CPEkm), meanlog = log(z$meanEF_CPEkm), sdlog = log((z$meanEF_CPE-z$meanEF_CPEkm)/4)) #rlnorm from chpt 14-45 of RMark book
pe[1]=352 #becuase our first PE doesn't have CIs it always estimates a NaN so I just set it back to the point estimate. This is also why you get warnings when you run the loop.
fit=glm(agg_logCPUE ~ log(pe)+z$meanCPUE)
betas[i]=fit$coefficients[2]
comp=abs(fit$aic - aggFit_wLK$aic)
ps[i]=comp
}
betas=numeric(1000) #betas from model fit to simulated data
ps=numeric(1000) #difference in AIC values between the simulated data model fit and the experimental data model fit
pe=rlnorm(n=length(z$meanEF_CPEkm), meanlog = log(z$meanEF_CPEkm), sdlog = log((z$meanEF_CPE-z$meanEF_CPEkm)/4)) #rlnorm from chpt 14-45 of RMark book
#rlnorm from chpt 14-45 of RMark book
#rlnorm prodices NAs
pe<-is.na(pe)=0
#rlnorm from chpt 14-45 of RMark book
#rlnorm prodices NAs
is.na(pe)=0
#rlnorm from chpt 14-45 of RMark book
#rlnorm prodices NAs
is.na(pe)<- 0
#rlnorm from chpt 14-45 of RMark book
#rlnorm prodices NAs
pe["NaN"]=0
bassEF=bassEF[,c(3,5,13,19,27:29)]
bassEF$CPEkm=bassEF$CPEmile/1.60934   # convert fish per mile to fish per km
bassEF$distanceShockedKm=bassEF$distanceShockedMiles*0.621371 # convert miles to km
lake_yearBASSef= bassEF %>%
group_by(WBIC,species,surveyYear) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearBASSef=as.data.frame(lake_yearBASSef)
bassJoin=left_join(lake_yearBASSef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear"))
bassJoin=bassJoin[!is.na(bassJoin$meanCPUE),]
View(bassJoin)
unique(bassJoin$std)
panEF=panEF[,c(3,5,13,19,25:27)]
panEF$CPEkm=panEF$CPEmile/1.60934   # convert fish per mile to fish per km
panEF$distanceShockedKm=panEF$distanceShockedMiles*0.621371 # convert miles to km
lake_yearPANef= panEF %>%
group_by(WBIC,species,surveyYear) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearPANef=as.data.frame(lake_yearPANef)
walleyeEF=walleyeEF[,c(3,5,13,19,23:24,27)]
walleyeEF$CPEkm=walleyeEF$CPEmile/1.60934   # convert fish per mile to fish per km
walleyeEF$distanceShockedKm=walleyeEF$distanceShockedMiles*0.621371 # convert miles to km
#remove commas from total fish caught
walleyeEF$totalNumberCaughtFish=as.numeric(gsub(",","",walleyeEF$totalNumberCaughtFish))
lake_yearWALLef= walleyeEF %>%
group_by(WBIC,species,surveyYear) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearWALLef=as.data.frame(lake_yearWALLef)
##### merge data sets from angling CPUE and electrofishing CPUE to get exact lake-year matches
# convert fishSpeciesCode in lake_yearCPUE to species (name from ef stuff)
lake_yearCPUE$species=""
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="X22"]="WALLEYE"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W11"]="SMALLMOUTH BASS"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W12"]="LARGEMOUTH BASS"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="X15"]="YELLOW PERCH"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W14"]="BLACK CRAPPIE"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W09"]="BLUEGILL"
# trim species without EF data (can we get other species EF data?)
lake_yearCPUE=lake_yearCPUE[lake_yearCPUE$species!="",]
bassJoin=left_join(lake_yearBASSef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear"))
bassJoin=bassJoin[!is.na(bassJoin$meanCPUE),]
panJoin=left_join(lake_yearPANef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear"))
panJoin=panJoin[!is.na(panJoin$meanCPUE),]
wallJoin=left_join(lake_yearWALLef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear"))
wallJoin=wallJoin[!is.na(wallJoin$meanCPUE),]
View(lake_yearPANef)
unique(panJoin$std)
unique(wallJoin$std)
bassJoin$PE.ucl=bassJoin$std+bassJoin$meanCPUE
hist(rlnorm(n=length(z$meanEF_CPEkm), meanlog = log(z$meanEF_CPEkm)))
hist(z$meanEF_CPEkm)
hist(log(z$meanEF_CPEkm))
bassJoin$PE.ucl=bassJoin$std+bassJoin$meanCPUE
bassJoin$PE.lcll=bassJoin$std-bassJoin$meanCPUE
wallJoin$PE.ucl=wallJoin$std+wallJoin$meanCPUE
wallJoin$PE.lcl=wallJoin$std-wallJoin$meanCPUE
panJoin$PE.ucl=panJoin$std+panJoin$meanCPUE
panJoin$PE.lcl=panJoin$std-panJoin$meanCPUE
View(wallJoin)
#make d the dataframe you want
d=bassJoin
z=d[!duplicated(d$meanEF_CPEkm),]
agg_logCPUE=log(z$meanCPUE)
agg_logN=log(z$meanEF_CPEkm)
aggFit_wLK=glm(agg_logCPUE~agg_logN)
#estimate agg fit glm summary 0.42386
summary(aggFit_wLK)
for(i in 1:1000){
pe=rlnorm(n=length(z$meanEF_CPEkm), meanlog = log(z$meanEF_CPEkm))
#rlnorm from chpt 14-45 of RMark book
fit=glm(agg_logCPUE ~ log(pe)+z$meanCPUE)
betas[i]=fit$coefficients[2]
comp=abs(fit$aic - aggFit_wLK$aic)
ps[i]=comp
}
betas=numeric(1000) #betas from model fit to simulated data
ps=numeric(1000) #difference in AIC values between the simulated data model fit and the experimental data model fit
betas=numeric(1000) #betas from model fit to simulated data
ps=numeric(1000) #difference in AIC values between the simulated data model fit and the experimental data model fit
for(i in 1:1000){
pe=rlnorm(n=length(z$meanEF_CPEkm), meanlog = log(z$meanEF_CPEkm))
#rlnorm from chpt 14-45 of RMark book
fit=glm(agg_logCPUE ~ log(pe)+z$meanCPUE)
betas[i]=fit$coefficients[2]
comp=abs(fit$aic - aggFit_wLK$aic)
ps[i]=comp
}
plot(betas, ps)
hist(betas)
hist(ps)
hist(betas, main = "Bass simulated betas")
#make d the dataframe you want, using bass as example
d=wallJoin
z=d[!duplicated(d$meanEF_CPEkm),]
agg_logCPUE=log(z$meanCPUE)
agg_logN=log(z$meanEF_CPEkm)
aggFit_wLK=glm(agg_logCPUE~agg_logN)
#estimate agg fit glm summary 0.42386
summary(aggFit_wLK)
View(d)
betas=numeric(1000) #betas from model fit to simulated data
ps=numeric(1000) #difference in AIC values between the simulated data model fit and the experimental data model fit
for(i in 1:1000){
pe=rlnorm(n=length(z$meanEF_CPEkm), meanlog = log(z$meanEF_CPEkm))
#rlnorm from chpt 14-45 of RMark book
fit=glm(agg_logCPUE ~ log(pe)+z$meanCPUE)
betas[i]=fit$coefficients[2]
comp=abs(fit$aic - aggFit_wLK$aic)
ps[i]=comp
}
plot(betas, ps)
plot(betas, ps)
hist(betas, main = "walleye betas")
hist(ps)
unique(agg_logCPUE)
agg_logCPUE<- agg_logCPUE!=-Inf
unique(z$meanCPUE)
#make d the dataframe you want, using bass as example
d=panJoin
z=d[!duplicated(d$meanEF_CPEkm),]
agg_logCPUE=log(z$meanCPUE)
#wallJoin agg_logCPUE has Inf value, needs to be removed for glm fit
agg_logN=log(z$meanEF_CPEkm)
aggFit_wLK=glm(agg_logCPUE~agg_logN)
unique(z$meanCPUE)
unique(agg_logCPUE)
agg_logCPUE%/%log(z$meanCPUE)!=-Inf
agg_logCPUE%/%log(z$meanCPUE)!=-Inf=T
agg_logCPUE%/%T=log(z$meanCPUE)!=-Inf
agg_logCPUE%/%T=%/%log(z$meanCPUE)!=-Inf
#make d the dataframe you want, using bass as example
d=panJoin
z=d[!duplicated(d$meanEF_CPEkm),]
agg_logCPUE=log(z$meanCPUE)
unique(agg_logCPUE)
unique(z$meanCPUE)
which(z$meanCPUE==0)
z[200,]
View(lake_yearPANef)
View(creel)
creel[creel$WBIC==2949200&creel$surveyYear==2002]
creel[creel$WBIC==2949200&creel$surveyYear==2002,]
creel[creel$WBIC==2949200&creel$surveyYear==2002&creel$fishSpeciesCode==W09,]
creel[creel$WBIC==2949200&creel$surveyYear==2002&creel$fishSpeciesCode=="W09",]
#general linear model for bass, using glm function
fit1<-glm(bassJoin$logCPUE~bassJoin$logAbun)
summary(fit1)
#ploting model with fit line bass log transformed abund. and CPUE
plot(x=bassJoin$logAbun,y=bassJoin$logCPUE)
#creating log CPUE and log N columns, removing na's and infinite values so glm can run and we can make fit
bassJoin$logCPUE=log(bassJoin$meanCPUE)
bassJoin$logAbun=log(bassJoin$meanEF_CPEkm)
bassJoin<- bassJoin[is.na(bassJoin$logCPUE)==F,]
bassJoin<- bassJoin[bassJoin$logCPUE!=-Inf,]
#general linear model for bass, using glm function
fit1<-glm(bassJoin$logCPUE~bassJoin$logAbun)
summary(fit1)
#ploting model with fit line bass log transformed abund. and CPUE
plot(x=bassJoin$logAbun,y=bassJoin$logCPUE)
abline(fit1)
range(bassJoin$meanEF_CPEkm)
range(bassJoin$meanEF_CPEkm, NA.rm=T)
range(bassJoin$meanEF_CPEkm, na.rm=T)
fit1$coefficients
plot(x=bassJoin$meanEF_CPEkm,y=bassJoin$meanCPUE)
lines(0:65,exp(fit1$coefficients[1])*0:65^fit1$coefficients[2])
lines(1:65,exp(fit1$coefficients[1])*1:65^fit1$coefficients[2])
exp(fit1$coefficients[1])*1:65^fit1$coefficients[2
]
lines(1:65,exp(fit1$coefficients[1])*(1:65)^fit1$coefficients[2])
plot(1:65,exp(fit1$coefficients[1])*(1:65)^fit1$coefficients[2])
range(panJoin$meanEF_CPEkm, na.rm=T)
range(wallJoin$meanEF_CPEkm, na.rm=T)
#normal spcae plot of model fit to the data, qN^B
#coefficients 2 is beta
plot(x=panJoin$meanEF_CPEkm,y=panJoin$meanCPUE)
plot(0:100,exp(fit1$coefficients[1])*(0:100)^fit1$coefficients[2])
lines(0:100,exp(fit1$coefficients[1])*(0:100)^fit1$coefficients[2])
#normal spcae plot of model fit to the data, exponential(intercept)*x^slope this is qN^B
#coefficients 2 is beta
plot(x=wallJoin$meanEF_CPEkm,y=wallJoin$meanCPUE)
plot(1:165,exp(fit1$coefficients[1])*(1:165)^fit1$coefficients[2])
#normal spcae plot of model fit to the data, exponential(intercept)*x^slope this is qN^B
#coefficients 2 is beta
plot(x=wallJoin$meanEF_CPEkm,y=wallJoin$meanCPUE)
lines(1:165,exp(fit1$coefficients[1])*(1:165)^fit1$coefficients[2])
View(lake_yearCPUE)
View(lake_yearCPUE)
### Ploting hyperstability ###
plot(x=bassJoin$meanEF_CPEkm,y=lake_yearCPUE$meanCPUE)
### Ploting hyperstability ###
plot(x=bassJoin$meanEF_CPEkm,y=bassJoin$meanCPUE)
lines(1:165,exp(fit1$coefficients[1])*(1:165)^fit1$coefficients[2])
#normal spcae plot of model fit to the data, exponential(intercept)*x^slope this is qN^B
#coefficients 2 is beta
plot(x=wallJoin$meanEF_CPEkm,y=wallJoin$meanCPUE)
lines(1:165,exp(fit3$coefficients[1])*(1:165)^fit3$coefficients[2])
#normal spcae plot of model fit to the data, qN^B
#coefficients 2 is beta
plot(x=panJoin$meanEF_CPEkm,y=panJoin$meanCPUE)
lines(0:100,exp(fit2$coefficients[1])*(0:100)^fit2$coefficients[2])
#normal spcae plot of model fit to the data, qN^B
#coefficients 2 is beta
plot(x=panJoin$meanEF_CPEkm,y=panJoin$meanCPUE)
lines(0:160,exp(fit2$coefficients[1])*(0:160)^fit2$coefficients[2])
plot(0:160,exp(fit2$coefficients[1])*(0:160)^fit2$coefficients[2])
#ploting model with fit line bass log transformed abund. and CPUE
plot(x=wallJoin$logAbun,y=wallJoin$logCPUE)
wallJoin$logCPUE=log(wallJoin$meanCPUE)
wallJoin$logAbun=log(wallJoin$meanEF_CPEkm)
wallJoin<- wallJoin[wallJoin$logCPUE!=-Inf,]
# glmodel for walleye, fit summary estimate 0.63073
fit3<-glm(wallJoin$logCPUE~wallJoin$logAbun)
summary(fit3)
#ploting model with fit line bass log transformed abund. and CPUE
plot(x=wallJoin$logAbun,y=wallJoin$logCPUE)
abline(fit3)
#normal spcae plot of model fit to the data, exponential(intercept)*x^slope this is qN^B
#coefficients 2 is beta
plot(x=wallJoin$meanEF_CPEkm,y=wallJoin$meanCPUE)
lines(1:165,exp(fit3$coefficients[1])*(1:165)^fit3$coefficients[2])
plot(1:165,exp(fit3$coefficients[1])*(1:165)^fit3$coefficients[2])
### Ploting hyperstability ###
plot(x=bassJoin$meanEF_CPEkm,y=bassJoin$meanCPUE)
lines(1:65,exp(fit1$coefficients[1])*(1:65)^fit1$coefficients[2])
lines(1:165,exp(fit3$coefficients[1])*(1:165)^fit3$coefficients[2])
lines(0:160,exp(fit2$coefficients[1])*(0:160)^fit2$coefficients[2])
ggplot(bassJoin, aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_jitter()
ggplot(bassJoin, aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_jitter()+geom_smooth(1:65,exp(fit1$coefficients[1])*(1:65)^fit1$coefficients[2])
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_jitter()+geom_smooth(1:65,exp(fit1$coefficients[1])*(1:65)^fit1$coefficients[2])
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_jitter()+
geom_smooth(aes(1:65,exp(fit1$coefficients[1])*(1:65)^fit1$coefficients[2]))
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_jitter()+
geom_smooth(aes(x=1:65,y=exp(fit1$coefficients[1])*(1:65)^fit1$coefficients[2], method=lm))
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_jitter()+
geom_smooth(aes(fit1))
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_jitter()+
geom_smooth(aes(fit1[1:389]))
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_jitter()+
geom_smooth(aes(fit1[1:388]))
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_jitter()+
geom_smooth(aes(fit1[1:390]))
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_jitter()+
geom_smooth(aes(fit1[1:390,]))
geom_smooth(aes(fit1))
geom_smooth(fit1,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))
ggplot(fit1,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_smooth(model=lm)
ggplot(fit1,aes(bassJoin$meanEF_CPEkm[1:327,],bassJoin$meanCPUE[1:327,]))+geom_smooth(model=lm)
ggplot(fit1,aes(bassJoin$meanEF_CPEkm[1:326,],bassJoin$meanCPUE[1:326,]))+geom_smooth(model=lm)
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_jitter()
ggplot(fit1,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_smooth(model=lm)
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+geom_point(aes(colour = year(surveyYear)))
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+
geom_point(aes(colour = year(lake_yearBASSef)))
ggplot(bassJoin,aes(bassJoin$meanEF_CPEkm,bassJoin$meanCPUE))+
geom_point(aes(colour = surveyYear))
