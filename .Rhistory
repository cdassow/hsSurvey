local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
#Vectors
#Logical
vtrl= c(TRUE,FALSE)
class(vtrl)
vtr2=c(15,85.68938,999999)
class(vtrl)
vtr2
class(vtr2)
vtr3=c(35L,58L,146L)
vtr3
class(vtr3)
vtr4=c(58.467L)
vtr5=c("Hello", FALSE, 65L)
vtr5
class(vtr5)
mtr= matrix(c(5:30),5,5)
mtr= matrix(c(5:29),5,5)
mtr
arr = array(c(1:9),dim = c(3,3,4,2))
arr
vtr7 =c(5.678,32,95,31.6)
vtr8=c("Hey", "How are you?","Thank you")
my list= list(vtr7,vtr8,vtr1)
my list = list(vtr7,vtr8,vtr1)
mylist = list(vtr7,vtr8,vtr1)
mylist = list(vtr7,vtr8,vtr2)
my list
mylist
#dataframe
vtr1 =c(1:5)
vtr2 = c("Neel","jude", "Adam","Adithya","Swetha")
vtr3 = c(15,25,65,145,74)
data.frame(vtr1,vtr2,vtr3)
print(6+9.87)
print(6/9.87)
#modular operation- to get division remainder
print(6%%9.87)
print(22/7)
print(22%%7)
#floor division rounds
print(22%/%7)
var = 25
var1 = 60
print(var==var1)
print(var !=var1)
value1= c(TRUE,FALSE, TRUE, FALSE)
value2= c(FALSE, TRUE, TRUE, FALSE)
print(value1 & value2)
print(value1|value2)
print(value1||value2)
#getting data for hunter
lmb=fishIS[fishIS$lakeID=="HT" & fishIS$species=="largemouth_bass",]
#putting samples into batches for one sampling night of work
#adding a column for batches
lmb$batch=numeric(nrow(lmb))
samp=unique(lmb$sampleID)
samp
#check times to sort batches
lmb$batch[lmb$sampleID%in%samp[1:4]]=1
lmb$batch[lmb$sampleID%in%samp[5:7]]=2
lmb$batch[lmb$sampleID%in%samp[8:11]]=3
lmb$batch[lmb$sampleID%in%samp[12]]=4
lmb$batch[lmb$sampleID%in%samp[13:15]]=5
#collected now
collectedNow=count(lmb, batch)
#marked now
markedNow=lmb%>%
group_by(batch)%>%
filter(clipApply=="AF")%>%
summarize(markedNow=n())
#recaptured now
recapturedNow=lmb%>%
group_by(batch)%>%
filter(clipRecapture=="AF")%>%
summarize(recapturedNow=n())
#combinbing collected, mark, recap data
recapStats=merge(collectedNow, markedNow, by="batch", all=T)
recapStats=merge(recapStats, recapturedNow, by="batch", all=T)
#check for 0s to fill in then run next line
recapStats$recapturedNow[c(2:3)]=0 # no recaps on the first and second samples
#calculate markedPrior for each sample
recapStats$markedPrior=numeric(nrow(recapStats)) #fills in all 0s, which is what we want for the first sample anyway
for(i in 2:nrow(recapStats)){
recapStats$markedPrior[i]=recapStats$markedNow[i-1]+recapStats$markedPrior[i-1]
}
recapStats
# PE, change PE for name of lake
HTpe=schnabel(markedPrior = recapStats$markedPrior, collectedNow = recapStats$n, recapturedNow = recapStats$recapturedNow )
HTpe
#assign to summary dataframe
#lines 54-99 code for lmb PE with lake, change row number for empty spot on PE table
PEs[1,]=c("HT","largemouth_bass", max(HTpe$event), HTpe[max(nrow(HTpe)),3], HTpe[max(nrow(HTpe)),2], HTpe[max(nrow(HTpe)),4])
smb=fishIS[fishIS$lakeID=="HT" & fishIS$species=="smallmouth_bass",]
if(nrow(smb[smb$clipRecapture=="AF",])>5){
#putting samples into batches for one sampling night of work
#adding a column for batches
smb$batch=numeric(nrow(smb))
samp=unique(smb$sampleID)
samp
smb$batch[smb$sampleID%in%samp[1:3]]=1
smb$batch[smb$sampleID%in%samp[4:6]]=2
smb$batch[smb$sampleID%in%samp[7:10]]=3
smb$batch[smb$sampleID%in%samp[11]]=4
smb$batch[smb$sampleID%in%samp[12:14]]=5
#collected now
collectedNow=count(smb, batch)
#marked now
markedNow=smb%>%
group_by(batch)%>%
filter(clipApply=="AF")%>%
summarize(markedNow=n())
#recaptured now
recapturedNow=smb%>%
group_by(batch)%>%
filter(clipRecapture=="AF")%>%
summarize(recapturedNow=n())
#combinbing collected, mark, recap data
recapStats=merge(collectedNow, markedNow, by="batch", all=T)
recapStats=merge(recapStats, recapturedNow, by="batch", all=T)
recapStats$recapturedNow[1:2]=0 # no recaps on the first and second samples
#calculate markedPrior for each sample
recapStats$markedPrior=numeric(nrow(recapStats)) #fills in all 0s, which is what we want for the first sample anyway
for(i in 2:nrow(recapStats)){
recapStats$markedPrior[i]=recapStats$markedNow[i-1]+recapStats$markedPrior[i-1]
}
recapStats
# PE
HTpe=schnabel(markedPrior = recapStats$markedPrior, collectedNow = recapStats$n, recapturedNow = recapStats$recapturedNow )
HTpe
#assign to summary dataframe
PEs[2,]=c("HT","smallmouth_bass", max(HTpe$event), HTpe[max(nrow(HTpe)),3], HTpe[max(nrow(HTpe)),2], HTpe[max(nrow(HTpe)),4])
}else{
PEs[2,]=c("HT","smallmouth_bass", rep(NA,4))
print("not enough SMB captured for PE at HT")
}
#getting data for hunter
lmb=fishIS[fishIS$lakeID=="HT" & fishIS$species=="largemouth_bass",]
#putting samples into batches for one sampling night of work
#adding a column for batches
lmb$batch=numeric(nrow(lmb))
samp=unique(lmb$sampleID)
samp
#check times to sort batches
lmb$batch[lmb$sampleID%in%samp[1:4]]=1
load("~/Fishscapes/fishSamplesIS.csv")
load("~/Fishscapes/fishInfoIS.csv")
setwd("C:/Users/Camille/Desktop/Biocomputing/ICB2019_Exercise08")
#code for 8.1
#move game data to environment
UWMSUgame <- read.csv("UWvMSU_1-22-13.txt")
View(UWMSUgame)
#code for 8.1
#move game data to environment
UWMSUgame <- read.delim("UWvMSU_1-22-13.txt")
View(UWMSUgame)
Totalscore <- function(x){
if x$team =="MSU"
MSUtotal <- sum([,3])
}else{
UWtotal <- sum([,3])
}
Totalscore <- function(x){
if x$team =="MSU"
MSUtotal <- sum("score")
}else{
UWtotal <- sum("score")
}
Totalscore(UWMSUgame)
Totalscore <- function(x){
MSUtotal <- sum("score")
if x$team =="MSU"{
MSUtotal <- sum("score")
}else{
UWtotal <- sum("score")
}
Totalscore(UWMSUgame)
Totalscore <- function(x){
if x$team =="MSU"{
MSUtotal <- sum("score")
}else{
UWtotal <- sum("score")}
}
Totalscore <- function(x){
if x$team =="MSU"{
MSUtotal <- sum(x$score)
}else{
UWtotal <- sum(x$score)}
}
if x$team =="MSU"{
MSUtotal <- sum(x$score)
}else{
UWtotal <- sum(x$score)}
if x$team =="MSU"{
MSUtotal <- sum(x$score)
}else{
UWtotal <- sum(x$score)}
Totalscore(UWMSUgame)
if UWMSUgame$team =="MSU"{
MSUtotal <- sum(UWMSUgame$score)
}else{
UWtotal <- sum(UWMSUgame$score)}
if UWMSUgame$team =="MSU"{
MSUtotal <- sum(UWMSUgame$score)
}
MSUscore <- UWMSUgame$team =="MSU"
MSUtotal <- sum(MSUscore$score)
for(i in 1:length(UWMSUgame)){
if(UWMSUgame$team=="MSU"){
MSU<- sum(UWMSUgame$score)
}else{
UW <- sum(UWMSUgame$score)
}
}
for(i in 1:length(UWMSUgame)){
if(UWMSUgame$team=="MSU"){
MSU <- sum(UWMSUgame$score)
}else{
UW <- sum(UWMSUgame$score)
}
}
head(MSU)
head(UW)
UWscore <- UWMSUgame$team=="UW"
UWscore <- UWMSUgame[,2]=="UW"
UWscore <- UWMSUgame(UWMSUgame[,2]=="UW")
UWscore <- UWMSUgame$UWMSUgame[,2]=="UW")
MSUscore <- UWMSUgame[,2]=="MSU"
plot(UWMSUgame,x=time,y=score)
plot(UWMSUgame,x=time,y=score)
library(ggplot2)
ggplot(data = UWMSUgame, aes(x = time, y = score))
View(UWMSUgame)
ggplot(data = UWMSUgame, aes(x = team, y = score))
ggplot(data = UWMSUgame, aes(x = team, y = score))+stat_smooth(method = "lm")+theme_classic()
plot(UWMSUgame,x=time,y=score)
plot(UWMSUgame,x=time,y=UWMSUgame[,3])
plot(UWMSUgame,x=time,y=UWMSUgame[,3],from, to, length.out = 5)
plot(UWMSUgame,x=time,y=UWMSUgame[,3],from = 1, to =5, length.out = 5)
plot(UWMSUgame,x=time,y=UWMSUgame[,3],from = 1, to =5, length.out = 5, xlim = 5)
plot(UWMSUgame,x=time,y=UWMSUgame[,3],from = 1, to =5, length.out = 10, xlim = 5)
plot(UWMSUgame,x=time,y=UWMSUgame[,3],from = 1, to =5, length.out = 10, xlim = 2)
plot(UWMSUgame,x=time,y=UWMSUgame[,3],from = 1, to =5, length.out = 10, xlim = 100)
plot(UWMSUgame,x=time,y=UWMSUgame[,3] type="l")
plot(UWMSUgame, x = time,y = UWMSUgame[,3] type="l")
plot(x = time,y = UWMSUgame[,3] type="l")
plot(x = time,y = UWMSUgame[,3],type="l")
plot(x = time,y = score,type="l")
plot(x = time,y = UWMSUgame[,3],type="l", ylab = score)
plot(x = time,y = UWMSUgame[,3],type="l", ylab = "score")
plot(x = time,y = UWMSUgame[,3],type="l", xlab = "score", ylab = "time")
plot(x = time,y = UWMSUgame[,3],type="l", xlab = "score", ylab = "time", main = "Overall score both teams")
#1
UW<-UWMSUgame[UWMSUgame$team == "UW",] #subset WU
UW$total<-rep(0,length(UW$score)) #null vector for total
UW$total[1]<-UW$score[1] #initial
#For loop
for(i in 2:length(UW$score)){
UW$total[i]<-UW$score[i]+UW$total[i-1] #create running total for total column; adds everything to previous
}
#Double check equality
sum(UW$score) == tail(UW$total,n=1)
#2
MSU<-UWMSUgame[UWMSUgame$team == "MSU",] #subset MSU
MSU$total<-rep(0,length(MSU$score)) #null vector for total
MSU$total[1]<-MSU$score[1] #initial
#For loop
for(i in 2:length(MSU$score)){
MSU$total[i]<-MSU$score[i]+MSU$total[i-1] #create running total for total column; adds everything to previous
}
#Double check equality
sum(MSU$score) == tail(MSU$total,n=1)
#Plot
plot(total ~ time,data=UW,type='l',col='darkgreen', xlab=c("Time (minutes)"), ylab=c("Total Points"))
lines(total ~ time,data=MSU,col ='firebrick')
setwd("C:/Users/Camille/Desktop/Fishscapes/hsSurvey")
library(readxl)
creel_raw_interview_fish_data_VO <- read_excel("creel_raw_interview_fish_data_VO.xlsx")
View(creel_raw_interview_fish_data_VO)
#clear global evnironment
rm(list=ls())
#load any packages we'll need
library(dplyr)
library(ggplot2)
#go to hsSurvey folder with creel data
setwd("C:/Users/Camille/Desktop/Fishscapes/hsSurvey/")
#load data from ecreel survey about fishing pressure
library(readxl)
creelSurvey_FishPressure <- read_excel("creelSurvey_FishPressure.xlsx")
View(creelSurvey_FishPressure)
#loading data from creel interview data from vilas
library(readxl)
creel_raw_interview_fish_data_VO <- read_excel("creel_raw_interview_fish_data_VO.xlsx")
View(creel_raw_interview_fish_data_VO)
library(readxl)
WALLEYE_FALLYOY_CPE <- read_excel("WALLEYE_FALLYOY_CPE.xlsx")
View(WALLEYE_FALLYOY_CPE)
#clear global evnironment
rm(list=ls())
#load any packages we'll need
library(dplyr)
library(ggplot2)
#go to hsSurvey folder with creel data
setwd("C:/Users/Camille/Desktop/Fishscapes/hsSurvey/")
#load data from ecreel survey about fishing pressure
library(readxl)
creelSurvey <- read_excel("creelSurvey_FishPressure.xlsx")
View(creelSurvey_FishPressure)
#loading data from creel interview data from vilas
creel_fishdata <- read_excel("creel_raw_interview_fish_data_VO.xlsx")
View(creel_raw_interview_fish_data_VO)
#loading data from walleye creel survey sheet
WALLEYE_CPE <- read_excel("WALLEYE_FALLYOY_CPE.xlsx")
View(WALLEYE_FALLYOY_CPE)
#loading data from creel interview data from vilas
library(readxl)
creel_fishdata <- read_excel("creel_raw_interview_fish_data_VO.xlsx")
View(creel_raw_interview_fish_data_VO)
#ORGANIZE DATA
UniqWBIC <- unique(WALLEYE_CPE$WBIC)
head(UniqWBIC)
#ORGANIZE DATA
#take out unique lakes using WBICs
UniqWBIC <- WALLEYE_CPE[,unique(WALLEYE_CPE$WBIC)]
#ORGANIZE DATA
#take out unique lakes using WBICs
VilasWal <- WALLEYE_CPE[WALLEYE_CPE$county=="VILAS",]
View(VilasWal)
UniqWBIC <- unique(VilasWal$WBIC)
ls(UniqWBIC)
VilasWal2 <- creelSurvey[creelSurvey$county=="VILAS",]
View(VilasWal2)
VilasWal2 <- creelSurvey[creelSurvey$county=="Villas",]
vilaswal3 <- creel_fishdata[creel_fishdata$county=="VILAS",]
View(vilaswal3)
Walfish=VilasWal%>%
inner_join(VilasWal2, by="WBIC")
View(VilasWal2)
Walfish=VilasWal%>%
inner_join(vilaswal3, by="WBIC")
View(Walfish)
VilasWal2.0 <- VilasWal2$Species=="walleye"
VilasWal2.0 <- VilasWal2[VilasWal2$Species=="walleye",]
View(VilasWal2.0)
rename(VilasWal2.0,lake=waterbody)
rename(VilasWal2.0,"lake"="waterbody")
rename(VilasWal2.0, lake = waterbody)
rename(VilasWal2.0, lake = "waterbody")
VilasWal2.0 %% rename(lake = "waterbody")
VilasWal2.0 %% rename_(lake = "waterbody")
rename_(VilasWal2.0, lake = "waterbody")
rename_(VilasWal2.0, lake = waterbody)
# get column names
colnames(VilasWal2.0)
# Rename column where names is "lake"
names(VilasWal2.0)[names(VilasWal2.0) == "lake"] <- "waterbody"
#join walfish and vilaswal2.0 to put all data together
ALLWalfish=Walfish%>%
inner_join(VilasWal2.0, by = "waterbody")
View(ALLWalfish)
#join walfish and vilaswal2.0 to put all data together
ALLWalfish=Walfish%>%
left_join(VilasWal2.0, by = "waterbody")
View(ALLWalfish)
#join walfish and vilaswal2.0 to put all data together
ALLWalfish=Walfish%>%
right_join(VilasWal2.0, by = "waterbody")
View(ALLWalfish)
#join walfish and vilaswal2.0 to put all data together
ALLWalfish=Walfish%>%
left_join(VilasWal2.0, by = "waterbody")
View(ALLWalfish)
