creel$anglingCPUE=creel$caughtAmt/creel$anglerHrs
# removing instances of CPUE >=30 (arbitrary...)
creel=creel[creel$anglingCPUE<30,]
# calculate average angling CPUE and sample size for each lake-year-species combination
lake_yearCPUE=creel %>%
group_by(WBIC,fishSpeciesCode,surveyYear,anglerHrs,county) %>%
summarize(meanCPUE=mean(anglingCPUE),
N=n())
lake_yearCPUE=as.data.frame(lake_yearCPUE)
####### electrofishing abundance
bassEF=gdriveURL("https://drive.google.com/open?id=11v8FbT2wnKx_CqUfxu_V9r_8fyCfcdD2")
bassEF=bassEF[,c(1,3,5,13,19,27:29)]
bassEF$CPEkm=bassEF$CPEmile/1.60934   # convert fish per mile to fish per km
bassEF$distanceShockedKm=bassEF$distanceShockedMiles*0.621371 # convert miles to km
lake_yearBASSef= bassEF %>%
group_by(WBIC,species,surveyYear,county) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearBASSef=as.data.frame(lake_yearBASSef)
panEF=gdriveURL("https://drive.google.com/open?id=1QIqCBQ9gbOgRFUJQbnokwwTZJi5VZZIR")
panEF=panEF[,c(1,3,5,13,19,25:27)]
panEF$CPEkm=panEF$CPEmile/1.60934   # convert fish per mile to fish per km
panEF$distanceShockedKm=panEF$distanceShockedMiles*0.621371 # convert miles to km
lake_yearPANef= panEF %>%
group_by(WBIC,species,surveyYear,county) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearPANef=as.data.frame(lake_yearPANef)
walleyeEF=gdriveURL("https://drive.google.com/open?id=1DPRROWv6Cf_fP6Z-kE9ZgUfdf_F_jSNT")
walleyeEF=walleyeEF[,c(1,3,5,13,19,23:24,27)]
walleyeEF$CPEkm=walleyeEF$CPEmile/1.60934   # convert fish per mile to fish per km
walleyeEF$distanceShockedKm=walleyeEF$distanceShockedMiles*0.621371 # convert miles to km
#remove commas from total fish caught
walleyeEF$totalNumberCaughtFish=as.numeric(gsub(",","",walleyeEF$totalNumberCaughtFish))
lake_yearWALLef= walleyeEF %>%
group_by(WBIC,species,surveyYear,county) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearWALLef=as.data.frame(lake_yearWALLef)
##### merge data sets from angling CPUE and electrofishing CPUE to get exact lake-year matches
# convert fishSpeciesCode in lake_yearCPUE to species (name from ef stuff)
lake_yearCPUE$species=""
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="X22"]="WALLEYE"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W11"]="SMALLMOUTH BASS"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W12"]="LARGEMOUTH BASS"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="X15"]="YELLOW PERCH"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W14"]="BLACK CRAPPIE"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W09"]="BLUEGILL"
# trim species without EF data (can we get other species EF data?)
lake_yearCPUE=lake_yearCPUE[lake_yearCPUE$species!="",]
bassJoin=left_join(lake_yearBASSef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear","county"="county"))
bassJoin=bassJoin[!is.na(bassJoin$meanCPUE),]
panJoin=left_join(lake_yearPANef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear","county"="county"))
panJoin=panJoin[!is.na(panJoin$meanCPUE),]
wallJoin=left_join(lake_yearWALLef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear","county"="county"))
wallJoin=wallJoin[!is.na(wallJoin$meanCPUE),]
table(lake_yearCPUE$species)
nrow(lake_yearBASSef)
nrow(bassJoin)
nrow(lake_yearPANef)
nrow(panJoin)
nrow(lake_yearWALLef)
#creating log CPUE and log N columns, removing na's and infinite values so glm can run and we can make fit
bassJoin$logCPUE=log(bassJoin$meanCPUE)
bassJoin$logAbun=log(bassJoin$meanEF_CPEkm)
bassJoin<- bassJoin[is.na(bassJoin$logCPUE)==F,]
bassJoin<- bassJoin[bassJoin$logCPUE!=-Inf,]
bassJoin<- bassJoin[is.na(bassJoin$logAbun)==F,]
bassJoin<- bassJoin[bassJoin$logAbun!=-Inf,]
wallJoin$logCPUE=log(wallJoin$meanCPUE)
wallJoin$logAbun=log(wallJoin$meanEF_CPEkm)
wallJoin<- wallJoin[wallJoin$logCPUE!=-Inf,]
panJoin$logCPUE=log(panJoin$meanCPUE)
panJoin$logAbun=log(panJoin$meanEF_CPEkm)
panJoin<- panJoin[panJoin$logCPUE!=-Inf,]
#making upper and lower confidence intervals using std and the mean to help with measuring betas
bassJoin$PE.ucl=bassJoin$std+bassJoin$meanCPUE
bassJoin$PE.lcl=bassJoin$std-bassJoin$meanCPUE
wallJoin$PE.ucl=wallJoin$std+wallJoin$meanCPUE
wallJoin$PE.lcl=wallJoin$std-wallJoin$meanCPUE
panJoin$PE.ucl=panJoin$std+panJoin$meanCPUE
panJoin$PE.lcl=panJoin$std-panJoin$meanCPUE
#join tables to compare species with lm model
LMBvsSMB<-lm(bassJoin$logCPUE~bassJoin$logAbun*bassJoin$species)
summary(LMBvsSMB)
#bringing in coarse woody habitat estimates from Jake Ziegler data from YOY mort. study
CWHdensity=gdriveURL("https://drive.google.com/open?id=1x1_JdeamiU2auqrlPQ3G_wA6Spuf0vwf")
bassCWHJoin=left_join(bassJoin,CWHdensity,by="WBIC")
bassCWHJoin=bassCWHJoin[!is.na(bassCWHJoin$Total.CWH.per.km.shoreline),]
View(bassCWHJoin)
View(lake_yearBASSef)
View(bassCWHJoin)
unique(bassCWHJoin)
unique(bassCWHJoin$WBIC)
# load function to load data from google drive
source("gdriveURL.R")
library(dplyr)
######## angling CPUE
# load creel data from google drive
creel1=gdriveURL("https://drive.google.com/open?id=1lxUd742QZMXDQunyFBnENKMYZ1XNM_Pc")
creel2=gdriveURL("https://drive.google.com/open?id=1UYhbGH28WXjmi-4BzhfwO4KYwrBCNO2Q")
creel=rbind(creel1,creel2)
# reduce to columns we care about
creel=creel[,c(3,6,12,18,25:26,30,36,38)]
# calculate effort
# add zeroes to times with only 2 or 3 digits
creel$timeStart[nchar(creel$timeStart)==3]=paste("0",creel$timeStart[nchar(creel$timeStart)==3],sep="")
creel$timeStart[nchar(creel$timeStart)==2]=paste("00",creel$timeStart[nchar(creel$timeStart)==2],sep="")
creel$timeStart[creel$timeStart=="0"]="0000"
creel=creel[creel$timeStart!="1",]  # 4 entries with "1", so we don't know start time
creel$timeEnd[nchar(creel$timeEnd)==3]=paste("0",creel$timeEnd[nchar(creel$timeEnd)==3],sep="")
creel$timeEnd[nchar(creel$timeStart)==2]=paste("00",creel$timeEnd[nchar(creel$timeEnd)==2],sep="")
creel$timeEnd[creel$timeEnd=="0"]="0000"
creel$boatHrs=0
# remove rows when end time is less than start time (assumes the boat was out over midnight)
creel=creel[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M"),]
# calculate difference of time in hours for rows where end time is greater than start time (fishing occurred in one day only)
creel$boatHrs[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M")]=as.numeric(difftime(strptime(creel$timeEnd[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M")],format="%H%M"),strptime(creel$timeStart[strptime(creel$timeEnd,format="%H%M")>=strptime(creel$timeStart,format="%H%M")],format="%H%M"),units="hours"))
# removing rows with a non-zero notFishingAmt because we don't know what it means to be non-zero...
creel=creel[creel$notFishingAmt==0,]
# remove rows with non-integer anglersAmt
creel=creel[!grepl(".",creel$anglersAmt,fixed=TRUE),]
# remove rows with anglersAmt above 10? (arbitrary choice for now)
creel=creel[creel$anglersAmt<=10,]
# get angler hours of effort from party size and boat hours
creel$anglerHrs=creel$boatHrs*creel$anglersAmt
# remove rows with no species code
creel=creel[!is.na(creel$fishSpeciesCode),]
# remove rows with NA for caughtAmt
creel=creel[!is.na(creel$caughtAmt),]
# remove no effort (anglerHrs==0) rows
creel=creel[creel$anglerHrs>0,]
# calculate angling CPUE
creel$anglingCPUE=creel$caughtAmt/creel$anglerHrs
# removing instances of CPUE >=30 (arbitrary...)
creel=creel[creel$anglingCPUE<30,]
# calculate average angling CPUE and sample size for each lake-year-species combination
lake_yearCPUE=creel %>%
group_by(WBIC,fishSpeciesCode,surveyYear) %>%
summarize(meanCPUE=mean(anglingCPUE),
N=n())
lake_yearCPUE=as.data.frame(lake_yearCPUE)
####### electrofishing abundance
bassEF=gdriveURL("https://drive.google.com/open?id=11v8FbT2wnKx_CqUfxu_V9r_8fyCfcdD2")
bassEF=bassEF[,c(3,5,13,19,27:29)]
bassEF$CPEkm=bassEF$CPEmile/1.60934   # convert fish per mile to fish per km
bassEF$distanceShockedKm=bassEF$distanceShockedMiles*0.621371 # convert miles to km
lake_yearBASSef= bassEF %>%
group_by(WBIC,species,surveyYear) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearBASSef=as.data.frame(lake_yearBASSef)
panEF=gdriveURL("https://drive.google.com/open?id=1QIqCBQ9gbOgRFUJQbnokwwTZJi5VZZIR")
panEF=panEF[,c(3,5,13,19,25:27)]
panEF$CPEkm=panEF$CPEmile/1.60934   # convert fish per mile to fish per km
panEF$distanceShockedKm=panEF$distanceShockedMiles*0.621371 # convert miles to km
lake_yearPANef= panEF %>%
group_by(WBIC,species,surveyYear) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearPANef=as.data.frame(lake_yearPANef)
walleyeEF=gdriveURL("https://drive.google.com/open?id=1DPRROWv6Cf_fP6Z-kE9ZgUfdf_F_jSNT")
walleyeEF=walleyeEF[,c(3,5,13,19,23:24,27)]
walleyeEF$CPEkm=walleyeEF$CPEmile/1.60934   # convert fish per mile to fish per km
walleyeEF$distanceShockedKm=walleyeEF$distanceShockedMiles*0.621371 # convert miles to km
#remove commas from total fish caught
walleyeEF$totalNumberCaughtFish=as.numeric(gsub(",","",walleyeEF$totalNumberCaughtFish))
lake_yearWALLef= walleyeEF %>%
group_by(WBIC,species,surveyYear) %>%
summarize(meanEF_CPEkm=mean(CPEkm),
totalFishCaught=sum(totalNumberCaughtFish),
totalDistShockedKm=sum(distanceShockedKm),
totalHoursSampled=sum(numberHoursSampled),
std=sd(CPEkm),
N=n())
lake_yearWALLef=as.data.frame(lake_yearWALLef)
##### merge data sets from angling CPUE and electrofishing CPUE to get exact lake-year matches
# convert fishSpeciesCode in lake_yearCPUE to species (name from ef stuff)
lake_yearCPUE$species=""
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="X22"]="WALLEYE"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W11"]="SMALLMOUTH BASS"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W12"]="LARGEMOUTH BASS"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="X15"]="YELLOW PERCH"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W14"]="BLACK CRAPPIE"
lake_yearCPUE$species[lake_yearCPUE$fishSpeciesCode=="W09"]="BLUEGILL"
# trim species without EF data (can we get other species EF data?)
lake_yearCPUE=lake_yearCPUE[lake_yearCPUE$species!="",]
bassJoin=left_join(lake_yearBASSef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear"))
bassJoin=bassJoin[!is.na(bassJoin$meanCPUE),]
panJoin=left_join(lake_yearPANef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear"))
panJoin=panJoin[!is.na(panJoin$meanCPUE),]
wallJoin=left_join(lake_yearWALLef,lake_yearCPUE,by=c("WBIC"="WBIC","species"="species","surveyYear"="surveyYear"))
wallJoin=wallJoin[!is.na(wallJoin$meanCPUE),]
table(lake_yearCPUE$species)
nrow(lake_yearBASSef)
nrow(bassJoin)
nrow(lake_yearPANef)
nrow(panJoin)
nrow(lake_yearWALLef)
#general linear model for bass, using glm function
fit1<-glm(bassJoin$logCPUE~bassJoin$logAbun)
summary(fit1)
bassJoin$logCPUE=log(bassJoin$meanCPUE)
bassJoin$logAbun=log(bassJoin$meanEF_CPEkm)
bassJoin<- bassJoin[is.na(bassJoin$logCPUE)==F,]
bassJoin<- bassJoin[bassJoin$logCPUE!=-Inf,]
wallJoin$logCPUE=log(wallJoin$meanCPUE)
wallJoin$logAbun=log(wallJoin$meanEF_CPEkm)
wallJoin<- wallJoin[wallJoin$logCPUE!=-Inf,]
panJoin$logCPUE=log(panJoin$meanCPUE)
panJoin$logAbun=log(panJoin$meanEF_CPEkm)
panJoin<- panJoin[panJoin$logCPUE!=-Inf,]
#general linear model for bass, using glm function
fit1<-glm(bassJoin$logCPUE~bassJoin$logAbun)
summary(fit1)
#add in Building density
buildDensity2018=gdriveURL("https://drive.google.com/open?id=11lPPduqiXIxz00fm6xxFzUA8u9nCOBnN")
#joining building density to bass catch + abund info
bassbuildJoin=left_join(bassJoin,buildDensity2018,by="WBIC")
bassbuildJoin=bassbuildJoin[!is.na(bassbuildJoin$buildingCount50m),]
#building density numbers for walleye lake yr observations
wallbuildJoin=left_join(wallJoin,buildDensity2018,by="WBIC")
wallbuildJoin=wallbuildJoin[!is.na(wallbuildJoin$buildingCount50m),]
#building density numbers for walleye lake yr observations
wallbuildJoin=left_join(wallJoin,buildDensity2018,by="WBIC")
wallbuildJoin=wallbuildJoin[!is.na(wallbuildJoin$buildingCount50m),]
#builing density numbers for panfish lake yr observations
panbuildJoin=left_join(panJoin,buildDensity2018,by="WBIC")
panbuildJoin=panbuildJoin[!is.na(panbuildJoin$buildingCount50m),]
#add in CWH
#bringing in coarse woody habitat estimates from Jake Ziegler data from YOY mort. study
CWHdensity=gdriveURL("https://drive.google.com/open?id=1x1_JdeamiU2auqrlPQ3G_wA6Spuf0vwf")
bassCWHJoin=left_join(bassJoin,CWHdensity,by="WBIC")
bassCWHJoin=bassCWHJoin[!is.na(bassCWHJoin$Total.CWH.per.km.shoreline),]
wallCWHJoin=left_join(wallJoin,CWHdensity,by="WBIC")
wallCWHJoin=wallCWHJoin[!is.na(wallCWHJoin$Total.CWH.per.km.shoreline),]
panCWHJoin=left_join(panJoin,CWHdensity,by="WBIC")
panCWHJoin=panCWHJoin[!is.na(panCWHJoin$Total.CWH.per.km.shoreline),]
#add in Building density
buildDensity2018=gdriveURL("https://drive.google.com/open?id=11lPPduqiXIxz00fm6xxFzUA8u9nCOBnN")
#joining building density to bass catch + abund info
bassbuildJoin=left_join(bassJoin,buildDensity2018,by="WBIC")
bassbuildJoin=bassbuildJoin[!is.na(bassbuildJoin$buildingCount50m),]
bassbuildCWHJoin=left_join(bassbuildJoin,CWHdensity,by="WBIC")
bassbuildCWHJoin=bassbuildCWHJoin[!is.na(bassbuildCWHJoin$CWH.greater.than.10cm.per.km.shoreline),]
#trimming table for values with measurements for CWH info and building density, only 23 obs
panbuildCWHJoin=left_join(panbuildJoin,CWHdensity,by="WBIC")
panbuildCWHJoin=panbuildCWHJoin[!is.na(panbuildCWHJoin$CWH.greater.than.10cm.per.km.shoreline),]
wallbuildCWHJoin=left_join(wallbuildJoin,CWHdensity,by="WBIC")
wallbuildCWHJoin=wallbuildCWHJoin[!is.na(wallbuildCWHJoin$CWH.greater.than.10cm.per.km.shoreline),]
#add in lake characterisitcs
linfo<-gdriveURL("https://drive.google.com/open?id=1ot9rEYnCG07p7aUxbeqN2mJ3cNrzYA0Y")
linfo=linfo[,1:13]
#join fish info with lake info using the waterbody codes
bassLinfo<-left_join(bassJoin,linfo,by="WBIC")
wallLinfo<-left_join(wallJoin,linfo,by="WBIC")
panLinfo<-left_join(panJoin,linfo,by="WBIC")
BLGJoinLinfo<-left_join(BLGJoin,linfo,by="WBIC")
#subsetting to just look at the number of bluegill obs, may be useful later with BLG vs LMB
BLGJoin=panJoin[panJoin$species=="BLUEGILL",]
BLGfit<-glm(BLGJoin$logCPUE~BLGJoin$logAbun)
summary(BLGfit)
BLGJoinLinfo<-left_join(BLGJoin,linfo,by="WBIC")
#model fits, testing out bass first
#lake depth
BassLDepth<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$maxDepth)
summary(BassLDepth)#no
#lake size
BassLsize<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$sizeAcres)
summary(BassLsize)#no
#lake type
BassLtype<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$lakeType)
summary(BassLtype)#no
#water clarity
BassLclar<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$waterClarity)
summary(BassLclar)#no
#will check for walleye
#lake depth
WallLDepth<-glm(wallLinfo$logCPUE~wallLinfo$logAbun+wallLinfo$logAbun:wallLinfo$maxDepth)
summary(WallLDepth)#no
#lake size
WallLsize<-glm(wallLinfo$logCPUE~wallLinfo$logAbun+wallLinfo$logAbun:wallLinfo$sizeAcres)
summary(WallLsize)#no
#lake type
WallLtype<-glm(wallLinfo$logCPUE~wallLinfo$logAbun+wallLinfo$logAbun:wallLinfo$lakeType)
summary(WallLtype)#no
#water clarity
WallLclar<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$waterClarity)
summary(WallLclar)#no
PanLDepth<-glm(panLinfo$logCPUE~panLinfo$logAbun+panLinfo$logAbun:panLinfo$maxDepth)
summary(PanLDepth)#no
#lake size
PanLsize<-glm(panLinfo$logCPUE~panLinfo$logAbun+panLinfo$logAbun:panLinfo$sizeAcres)
summary(PanLsize)#no
#lake type
PanLtype<-glm(panLinfo$logCPUE~panLinfo$logAbun+panLinfo$logAbun:panLinfo$lakeType)
summary(PanLtype)#no
#water clarity
PanLclar<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$waterClarity)
summary(WallLclar)#no
#model fits, testing out bass first
#lake depth
BassLDepth<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$maxDepth)
summary(BassLDepth)#no
#lake size
BassLsize<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$sizeAcres)
summary(BassLsize)#no
#lake type
BassLtype<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$lakeType)
summary(BassLtype)#no
#water clarity
BassLclar<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$waterClarity)
summary(BassLclar)#no
#will check for walleye
#lake depth
WallLDepth<-glm(wallLinfo$logCPUE~wallLinfo$logAbun+wallLinfo$logAbun:wallLinfo$maxDepth)
summary(WallLDepth)#no
#lake size
WallLsize<-glm(wallLinfo$logCPUE~wallLinfo$logAbun+wallLinfo$logAbun:wallLinfo$sizeAcres)
summary(WallLsize)#no
#lake type
WallLtype<-glm(wallLinfo$logCPUE~wallLinfo$logAbun+wallLinfo$logAbun:wallLinfo$lakeType)
summary(WallLtype)#no
#water clarity
WallLclar<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$waterClarity)
summary(WallLclar)#no
PanLDepth<-glm(panLinfo$logCPUE~panLinfo$logAbun+panLinfo$logAbun:panLinfo$maxDepth)
table(lake_yearCPUE$species)
nrow(lake_yearBASSef)
nrow(bassJoin)
nrow(lake_yearPANef)
nrow(panJoin)
nrow(lake_yearWALLef)
nrow(wallJoin)
LMBvsSMB<-lm(bassJoin$logCPUE~bassJoin$logAbun*bassJoin$species)
summary(LMBvsSMB)
fit4<-glm(bassbuildJoin$logCPUE~bassbuildJoin$logAbun+bassbuildJoin$logAbun:bassbuildJoin$buildingDensity200m)
summary(fit4)#nothing significant
#looking at residuals as a function of building density,look at relationship between beta and density
VilasBassFit<-glm(bassbuildJoin$logCPUE~bassbuildJoin$logAbun+bassbuildJoin$logAbun:bassbuildJoin$buildingCount200m)
plot(bassbuildJoin$buildingDensity200m,residuals(VilasBassFit))
residuals(VilasBassFit)
plot(bassbuildJoin$buildingDensity200m,residuals(VilasBassFit))
residuals(VilasBassFit)
fit5<-glm(panbuildJoin$logCPUE~panbuildJoin$logAbun+panbuildJoin$logAbun:panbuildJoin$buildingDensity200m)
summary(fit5)#look at p value
VilasPanFit<-glm(panbuildJoin$logCPUE~panbuildJoin$logAbun)
plot(panbuildJoin$buildingDensity200m,residuals(VilasPanFit))
fit6<-glm(wallbuildJoin$logCPUE~wallbuildJoin$logAbun+wallbuildJoin$logAbun:wallbuildJoin$buildingDensity200m)
summary(fit6)#look at p value
VilasWallFit<-glm(wallbuildJoin$logCPUE~wallbuildJoin$logAbun)
plot(wallbuildJoin$buildingDensity200m,residuals(VilasWallFit),
main="relationship between walleye betas and building density", ylab="Residuals")
#add in CWH
#bringing in coarse woody habitat estimates from Jake Ziegler data from YOY mort. study
CWHdensity=gdriveURL("https://drive.google.com/open?id=1x1_JdeamiU2auqrlPQ3G_wA6Spuf0vwf")
bassCWHJoin=left_join(bassJoin,CWHdensity,by="WBIC")
bassCWHJoin=bassCWHJoin[!is.na(bassCWHJoin$Total.CWH.per.km.shoreline),]
wallCWHJoin=left_join(wallJoin,CWHdensity,by="WBIC")
wallCWHJoin=wallCWHJoin[!is.na(wallCWHJoin$Total.CWH.per.km.shoreline),]
panCWHJoin=left_join(panJoin,CWHdensity,by="WBIC")
panCWHJoin=panCWHJoin[!is.na(panCWHJoin$Total.CWH.per.km.shoreline),]
fit7<-glm(bassbuildCWHJoin$logCPUE~bassbuildCWHJoin$logAbun+bassbuildCWHJoin$logAbun:bassbuildCWHJoin$Total.CWH.per.km.shoreline)
summary(fit7)#not significant
CWHBassFit<-glm(bassbuildCWHJoin$logCPUE~bassbuildCWHJoin$logAbun)
plot(bassbuildCWHJoin$Total.CWH.per.km.shoreline,residuals(CWHBassFit))
fit8<-glm(panCWHJoin$logCPUE~panCWHJoin$logAbun+panCWHJoin$logAbun:panCWHJoin$Total.CWH.per.km.shoreline)
summary(fit8)#not significant
CWHPanFit<-glm(panCWHJoin$logCPUE~panCWHJoin$logAbun)
plot(panCWHJoin$Total.CWH.per.km.shoreline,residuals(CWHPanFit))
fit9<-glm(wallCWHJoin$logCPUE~wallCWHJoin$logAbun+wallCWHJoin$logAbun:wallCWHJoin$Total.CWH.per.km.shoreline)
summary(fit9)#not significant
CWHWallFit<-glm(wallbuildCWHJoin$logCPUE~wallbuildCWHJoin$logAbun)
plot(wallbuildCWHJoin$Total.CWH.per.km.shoreline,residuals(CWHWallFit))
bassbuildCWHJoin=left_join(bassbuildJoin,CWHdensity,by="WBIC")
bassbuildCWHJoin=bassbuildCWHJoin[!is.na(bassbuildCWHJoin$CWH.greater.than.10cm.per.km.shoreline),]
#trimming table for values with measurements for CWH info and building density, only 23 obs
panbuildCWHJoin=left_join(panbuildJoin,CWHdensity,by="WBIC")
panbuildCWHJoin=panbuildCWHJoin[!is.na(panbuildCWHJoin$CWH.greater.than.10cm.per.km.shoreline),]
wallbuildCWHJoin=left_join(wallbuildJoin,CWHdensity,by="WBIC")
wallbuildCWHJoin=wallbuildCWHJoin[!is.na(wallbuildCWHJoin$CWH.greater.than.10cm.per.km.shoreline),]
#add in lake characterisitcs
linfo<-gdriveURL("https://drive.google.com/open?id=1ot9rEYnCG07p7aUxbeqN2mJ3cNrzYA0Y")
linfo=linfo[,1:13]
#join fish info with lake info using the waterbody codes
bassLinfo<-left_join(bassJoin,linfo,by="WBIC")
wallLinfo<-left_join(wallJoin,linfo,by="WBIC")
panLinfo<-left_join(panJoin,linfo,by="WBIC")
BLGJoinLinfo<-left_join(BLGJoin,linfo,by="WBIC")
#model fits, testing out bass first
#lake depth
BassLDepth<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$maxDepth)
summary(BassLDepth)#no
#lake size
BassLsize<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$sizeAcres)
summary(BassLsize)#no
#lake type
BassLtype<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$lakeType)
summary(BassLtype)#no
#water clarity
BassLclar<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$waterClarity)
summary(BassLclar)#no
#will check for walleye
#lake depth
WallLDepth<-glm(wallLinfo$logCPUE~wallLinfo$logAbun+wallLinfo$logAbun:wallLinfo$maxDepth)
summary(WallLDepth)#no
#lake size
WallLsize<-glm(wallLinfo$logCPUE~wallLinfo$logAbun+wallLinfo$logAbun:wallLinfo$sizeAcres)
summary(WallLsize)#no
#lake type
WallLtype<-glm(wallLinfo$logCPUE~wallLinfo$logAbun+wallLinfo$logAbun:wallLinfo$lakeType)
summary(WallLtype)#no
#water clarity
WallLclar<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$waterClarity)
summary(WallLclar)#no
PanLDepth<-glm(panLinfo$logCPUE~panLinfo$logAbun+panLinfo$logAbun:panLinfo$maxDepth)
summary(PanLDepth)#no
#lake size
PanLsize<-glm(panLinfo$logCPUE~panLinfo$logAbun+panLinfo$logAbun:panLinfo$sizeAcres)
summary(PanLsize)#no
#lake type
PanLtype<-glm(panLinfo$logCPUE~panLinfo$logAbun+panLinfo$logAbun:panLinfo$lakeType)
summary(PanLtype)#small signif with drainedge lake type
#water clarity
PanLclar<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$waterClarity)
summary(WallLclar)#no
length(unique(bassbuildJoin$WBIC))
library(readxl)
LMB2019 <- read_excel("pe2019-CM-3-5-20.xlsx")
setwd("C:/Users/Camille/Desktop/Fishscapes/hsSurvey")
LMB2019 <- read_excel("pe2019-CM-3-5-20.xlsx")
setwd("C:/Users/Camille/Desktop/Fishscapes")
LMB2019 <- read_excel("pe2019-CM-3-5-20.xlsx")
library(readxl)
PEsurvey2019 <- read_excel("PEsurvey2019.xlsx")
View(PEsurvey2019)
LMB2018<-gdriveURL("https://drive.google.com/open?id=11YqL34QNdqwg59TdKAXL0t2sYd2yN7GY")
View(LMB2018)
#make survey year column for 2018-19 fish data then join tables
LMB2018$surveyYear=2018
library(readxl)
LMB2019 <- read_excel("pe2019-CM-3-5-20.xlsx")
setwd("C:/Users/Camille/Desktop/Fishscapes/hsSurvey")
library(readxl)
LMB2019 <- read_excel("pe2019-CM-3-5-20.xlsx")
View(LMB2019)
#plotting catch vs abundance
#note: totalCPETime = totalNum/timeEffort, totalCPEDistMI=totalNum/distEffortmi,
#totalCPEDistKM=totalNum/distEffortkm
library(ggplot2)
ggplot(LMB2019, aes(x=nHat,y=totalCPEDistKM))+geom_point()
ggplot(LMB2019, aes(x=nHat,y=totalCPETime))+geom_point()
Fishfit<-glm(LMB2019$totalCPETime~LMB2019$nHat)
summary(Fishfit)
LMB2018<-gdriveURL("https://drive.google.com/open?id=11YqL34QNdqwg59TdKAXL0t2sYd2yN7GY")
#make survey year column for 2018-19 fish data then join tables
LMB2018$surveyYear=2018
LMB2019$surveyYear=2019
#making effort columns with the same names to join columns and datasets
LMB2019$fishPerKmShoreline=LMB2019$distEffortkm
LMB=full_join(LMB2018[,2:14],LMB2019[,2:16])
LMBfit<-glm(LMB$distEffortkm~LMB$nHat)
summary(LMBfit)
#add in lake characterisitcs
linfo<-gdriveURL("https://drive.google.com/open?id=1ot9rEYnCG07p7aUxbeqN2mJ3cNrzYA0Y")
linfo=linfo[,1:13]
#join fish info with lake info using the waterbody codes
bassLinfo<-left_join(bassJoin,linfo,by="WBIC")
wallLinfo<-left_join(wallJoin,linfo,by="WBIC")
panLinfo<-left_join(panJoin,linfo,by="WBIC")
BLGJoinLinfo<-left_join(BLGJoin,linfo,by="WBIC")
#model fits, testing out bass first
#lake depth
BassLDepth<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$maxDepth)
summary(BassLDepth)#no
#lake size
BassLsize<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$sizeAcres)
summary(BassLsize)#no
#lake type
BassLtype<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$lakeType)
summary(BassLtype)#no
#water clarity
BassLclar<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$waterClarity)
colnames(bassLinfo)
BassLmDepth<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$meanDepth)
summary(BassLmDepth)
#survey year
BassLyear<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$surveyYear)
summary(BassLmDepth)
summary(BassLyear)
BassLfishpresent<-glm(bassLinfo$logCPUE~bassLinfo$logAbun+bassLinfo$logAbun:bassLinfo$fishPresent)
summary(BassLfishpresent)
