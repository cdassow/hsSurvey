for (i in 1:10){
if(i%%2==1) print(i)
}
?numeric
dim(iris)
ncol(iris)
nrow(iris)
oddRows<-function(x){
oddRows<-function(x){
oddRows<-function(x){
for (i in 1:nrow(x)) {
if(i%%2==1) oddFileRow<-print(i)
return(oddFileRow)
}
}
oddRows(iris)
setwd("C:/Users/jcaff/Documents/Notre Dame/Senior/fall_19/Biocomputing/R/Tutorial/Ex_07/ICB2019_Exercise07")
#loading iris.csv to iris
iris<-read.csv("iris.csv")
#loading iris.csv to iris
iris<-read.csv("iris.csv")
#loading iris.csv to iris
iris<-read.csv("iris.csv")
#clear global environment
rm(list = ls())
#PACKAGES
library(dplyr)
#gDrive Upload script:
gdriveURL <- function(x){
x =
upURL = sub("^[^=]*", "", x)
y1 =  "https://docs.google.com/uc?id"
y2 = "&export=download"
downURL = paste0(y1,upURL,y2)
read.csv(downURL, header = TRUE, stringsAsFactors = FALSE)
}
#Loading BASS data from Google Drive
dnrBass<-gdriveURL("https://drive.google.com/open?id=11v8FbT2wnKx_CqUfxu_V9r_8fyCfcdD2")
#Loading Creel (Vilas and Oneida) data from Google Drive
creelFishLengVO<-gdriveURL("https://drive.google.com/open?id=1zDM2mn2A0xsaRvsf0r6Gh1Orco-kculc")
creelFishint1VO<-gdriveURL("https://drive.google.com/open?id=1T_QeJTms9QmG65iT1ul_FC1H1XbhBhd5")
lakeLMB<-gdriveURL("https://drive.google.com/open?id=1FArMiTuOsoC4E08nssZUpCekSkhkMTow")
creelFishLengVO<-gdriveURL("https://drive.google.com/open?id=1zDM2mn2A0xsaRvsf0r6Gh1Orco-kculc")
#shareable link for WI-DNR length data Vilas-Oneida
creelFishint1VO<-gdriveURL("https://drive.google.com/open?id=1T_QeJTms9QmG65iT1ul_FC1H1XbhBhd5")
#sharebale link for WI-DNR fish interview data Vilas-Oneida
lakeLMB<-gdriveURL("https://drive.google.com/open?id=1FArMiTuOsoC4E08nssZUpCekSkhkMTow")
#lake info from WI LMB lakes
##Organizing data##
#subsetting DNR Bass information to Vilas county
dnrBassVilas<-dnrBass[dnrBass$county=="VILAS",]
#joining lake info to dnrBassVilas
vilasBassLinfo<-semi_join(lakeLMB,dnrBassVilas,by="WBIC")
vilasBassFish=dnrBassVilas%>%
inner_join(vilasBassLinfo,by="WBIC")
#subsetting LMB and SMB data from creel data
creelLMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W12",]
creelSMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W11",]
#pulling out vilas county creel data
vilasCreelLMB<-creelLMB[creelLMB$county=="VILAS",]
vilasCreelSMB<-creelSMB[creelSMB$county=="VILAS",]
#selecting rows of creel data needed
vilasCreelLMBsort<-vilasCreelLMB[,c(1,2,3,6,25,26,30,36,37,38)]
vilasCreelSMBsort<-vilasCreelSMB[,c(1,2,3,6,25,26,30,36,37,38)]
#sort to lake and year and unique values
wbicsYear<-vilasBassFish[,c(1,2,3,5)]
wbicsBassFishUniq<-unique(wbicsYear)#generate data frame with list of lakes which lake data is present and bass BE surveys have been conducted for.
#repeating the wbics sort for Creel data
#LMB
wbicsYearCreelLMB<-vilasCreelLMBsort[,c(1,2,3,4)]
wbicsCreelLMBUniq<-unique(wbicsYearCreelLMB) #generate data frame with list of lakes that have had creel data for LMB and the year the surveys were conducted
#SMB
wbicsYearCreelSMB<-vilasCreelSMBsort[,c(1,2,3,4)]
wbicsCreelSMBUniq<-unique(wbicsYearCreelSMB)
#renaming the surveyYear column to surveyYearCreel and surveyYearBE
wbicsBassFishUniq<-wbicsBassFishUniq%>%
rename(lakeName=waterbody,county=county.x)
wbicsCreelLMBUniq<-wbicsCreelLMBUniq%>%
rename(surveyYearCreel=surveyYear)
wbicsCreelSMBUniq<-wbicsCreelSMBUniq%>%
rename(surveyYearCreel=surveyYear)
#joining creel surveys to list of years where both SMB and LMB surveys occured
vilasCreelWBICS=inner_join(wbicsCreelLMBUniq,wbicsCreelSMBUniq,by=c("WBIC","county","lakeName","surveyYearCreel"))
#joining bass abundance to creel surveys
vilasWBICSLMB=inner_join(wbicsBassFishUniq,vilasCreelWBICS,by=c("WBIC","county","lakeName"))
View(vilasWBICSLMB)
View(wbicsYear)
View(lakeLMB)
View(creelFishLengVO)
View(creelFishint1VO)
View(dnrBass)
#removing extraneous columns from dnrBass
dnrBass<-dnrBass[,c(1,2,3,5,12,13,27,28,29)]
View(dnrBass)
#removing extraneous columns from lakeLMB
lakeLMB<-lakeLMB[,c(1,2,3,4,14)]
View(vilasBassFish)
View(vilasBassLinfo)
View(wbicsYear)
View(wbicsBassFishUniq)
View(wbicsCreelLMBUniq)
View(wbicsBassFishUniq)
#setting working directory
setwd("C:/Users/jcaff/Documents/Jones Lab/hsSurvey")
rm(list=ls())
#set working directory
setwd("C:/Users/jcaff/Documents/Notre Dame/Senior/spring_20/Ecology_R/R")
rm(list = ls())
#setting working directory
setwd("C:/Users/jcaff/Documents/Jones Lab/hsSurvey")
#PACKAGES
library(dplyr)
##Loading Data##
#gDrive Upload script:
gdriveURL <- function(x){
x =
upURL = sub("^[^=]*", "", x)
y1 =  "https://docs.google.com/uc?id"
y2 = "&export=download"
downURL = paste0(y1,upURL,y2)
read.csv(downURL, header = TRUE, stringsAsFactors = FALSE)
}
creelFishint1VO<-gdriveURL("https://drive.google.com/open?id=1T_QeJTms9QmG65iT1ul_FC1H1XbhBhd5")
creelLMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W12",]
creelSMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W11",]
#pulling out vilas county creel data
vilasCreelLMB<-creelLMB[creelLMB$county=="VILAS",]
vilasCreelSMB<-creelSMB[creelSMB$county=="VILAS",]
#selecting columns of creel data needed
vilasCreelLMB<-vilasCreelLMB[,c(1,2,3,6,12,18,25,26,30,36,37,38)]
vilasCreelSMB<-vilasCreelSMB[,c(1,2,3,6,12,18,25,26,30,36,37,38)]
#remove NA's
vilasCreelLMB<-vilasCreelLMB[is.na(vilasCreelLMB$WBIC)==FALSE,]
vilasCreelSMB<-vilasCreelSMB[is.na(vilasCreelSMB$WBIC)==FALSE,]
#selecting for rows with by fishedPerct
vilasCreelLMB<-vilasCreelLMB[vilasCreelLMB$fishedPerc!=0,]
vilasCreelSMB<-vilasCreelSMB[vilasCreelSMB$fishedPerc!=0,]
#reformating Date Columns
#adding 0 character to 3-digit times
for (i in 1:length(vilasCreelLMB$timeStart)) {
if (nchar(vilasCreelLMB$timeStart[i])<4){
vilasCreelLMB$timeStart[i]<-paste("0",vilasCreelLMB$timeStart[i],sep = "")
}
}
for (i in 1:length(vilasCreelLMB$timeEnd)) {
if (nchar(vilasCreelLMB$timeEnd[i])<4){
vilasCreelLMB$timeEnd[i]<-paste("0",vilasCreelLMB$timeEnd[i],sep = "")
}
}
#create dateSet Column
vilasCreelLMB$dateSet<-paste(vilasCreelLMB$dateSample,vilasCreelLMB$timeStart)
vilasCreelLMB$dateSet<-as.POSIXct(vilasCreelLMB$dateSet,format="%m/%d/%y %H%M")
#create dateSample Column
vilasCreelLMB$dateSample<-paste(vilasCreelLMB$dateSample,vilasCreelLMB$timeEnd)
vilasCreelLMB$dateSample<-as.POSIXct(vilasCreelLMB$dateSample,format="%m/%d/%y %H%M")
#modifying notFishAmt to time
#divide time to introduce decimal between hrs and mins
for (i in 1:length(vilasCreelLMB$notFishingAmt)){
vilasCreelLMB$notFishingAmt[i]<-(vilasCreelLMB$notFishingAmt[i]/100)
}
#create object for notFishingAmt data; turn values into characters
notFish<-vilasCreelLMB$notFishingAmt
notFish<-as.character(notFish)
notFishsplit<-length(notFish)
for(i in 1:length(notFish)){
if (nchar(notFish[i])>1){
notFishsplit[i]<-strsplit(notFish[i],split = "\\.")
}
}
for (i in 1:length(notFishsplit)) {
if (nchar(notFishsplit[i])<2){
notFishsplit[i]<-paste("0",notFishsplit,sep = "")
}
}
View(notFishsplit)
for (i in 1:length(notFish)) {
if (nchar(notFish[i])==1){
notFish[i]<-paste("0",notFish,sep = "")
}
}
for (i in 1:length(notFish)) {
if (nchar(notFish[i])<2){
notFish[i]<-paste("0",notFish,sep = "")
}
}
for(i in 1:length(notFish)){
if (nchar(notFish[i])>1){
notFishsplit[i]<-strsplit(notFish[i],split = "\\.")
}
}
View(notFishsplit)
notFishsplit<-notFish
for(i in 1:length(notFish)){
if (nchar(notFish[i])>1){
notFishsplit[i]<-strsplit(notFish[i],split = "\\.")
}
}
View(notFishsplit)
creelLMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W12",]
creelSMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W11",]
#pulling out vilas county creel data
vilasCreelLMB<-creelLMB[creelLMB$county=="VILAS",]
vilasCreelSMB<-creelSMB[creelSMB$county=="VILAS",]
#selecting columns of creel data needed
vilasCreelLMB<-vilasCreelLMB[,c(1,2,3,6,12,18,25,26,30,36,37,38)]
vilasCreelSMB<-vilasCreelSMB[,c(1,2,3,6,12,18,25,26,30,36,37,38)]
#remove NA's
vilasCreelLMB<-vilasCreelLMB[is.na(vilasCreelLMB$WBIC)==FALSE,]
vilasCreelSMB<-vilasCreelSMB[is.na(vilasCreelSMB$WBIC)==FALSE,]
#selecting for rows with by fishedPerct
vilasCreelLMB<-vilasCreelLMB[vilasCreelLMB$fishedPerc!=0,]
vilasCreelSMB<-vilasCreelSMB[vilasCreelSMB$fishedPerc!=0,]
#reformating Date Columns
#adding 0 character to 3-digit times
for (i in 1:length(vilasCreelLMB$timeStart)) {
if (nchar(vilasCreelLMB$timeStart[i])<4){
vilasCreelLMB$timeStart[i]<-paste("0",vilasCreelLMB$timeStart[i],sep = "")
}
}
for (i in 1:length(vilasCreelLMB$timeEnd)) {
if (nchar(vilasCreelLMB$timeEnd[i])<4){
vilasCreelLMB$timeEnd[i]<-paste("0",vilasCreelLMB$timeEnd[i],sep = "")
}
}
#create dateSet Column
vilasCreelLMB$dateSet<-paste(vilasCreelLMB$dateSample,vilasCreelLMB$timeStart)
vilasCreelLMB$dateSet<-as.POSIXct(vilasCreelLMB$dateSet,format="%m/%d/%y %H%M")
#create dateSample Column
vilasCreelLMB$dateSample<-paste(vilasCreelLMB$dateSample,vilasCreelLMB$timeEnd)
vilasCreelLMB$dateSample<-as.POSIXct(vilasCreelLMB$dateSample,format="%m/%d/%y %H%M")
#modifying notFishAmt to time
#divide time to introduce decimal between hrs and mins
for (i in 1:length(vilasCreelLMB$notFishingAmt)){
vilasCreelLMB$notFishingAmt[i]<-(vilasCreelLMB$notFishingAmt[i]/100)
}
#create object for notFishingAmt data; turn values into characters
notFish<-vilasCreelLMB$notFishingAmt
notFish<-as.character(notFish)
for (i in 1:length(notFish)) {
if (nchar(notFish[i])<2){
notFish[i]<-paste("0",notFish,sep = "")
}
}
for(i in 1:length(notFish)){
if (nchar(notFish[i])>1){
notFishsplit[i]<-strsplit(notFish[i],split = "\\.")
}
}
View(notFishsplit)
#modifying notFishAmt to time
#divide time to introduce decimal between hrs and mins
for (i in 1:length(vilasCreelLMB$notFishingAmt)){
vilasCreelLMB$notFishingAmt[i]<-(vilasCreelLMB$notFishingAmt[i]/100)
}
#create object for notFishingAmt data; turn values into characters
notFish<-vilasCreelLMB$notFishingAmt
notFish<-as.character(notFish)
for(i in 1:length(notFish)){
if (nchar(notFish[i])>1){
notFishsplit[i]<-strsplit(notFish[i],split = "\\.")
}
}
View(notFishsplit)
creelLMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W12",]
creelSMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W11",]
#pulling out vilas county creel data
vilasCreelLMB<-creelLMB[creelLMB$county=="VILAS",]
vilasCreelSMB<-creelSMB[creelSMB$county=="VILAS",]
#selecting columns of creel data needed
vilasCreelLMB<-vilasCreelLMB[,c(1,2,3,6,12,18,25,26,30,36,37,38)]
vilasCreelSMB<-vilasCreelSMB[,c(1,2,3,6,12,18,25,26,30,36,37,38)]
#remove NA's
vilasCreelLMB<-vilasCreelLMB[is.na(vilasCreelLMB$WBIC)==FALSE,]
vilasCreelSMB<-vilasCreelSMB[is.na(vilasCreelSMB$WBIC)==FALSE,]
#selecting for rows with by fishedPerct
vilasCreelLMB<-vilasCreelLMB[vilasCreelLMB$fishedPerc!=0,]
vilasCreelSMB<-vilasCreelSMB[vilasCreelSMB$fishedPerc!=0,]
#reformating Date Columns
#adding 0 character to 3-digit times
for (i in 1:length(vilasCreelLMB$timeStart)) {
if (nchar(vilasCreelLMB$timeStart[i])<4){
vilasCreelLMB$timeStart[i]<-paste("0",vilasCreelLMB$timeStart[i],sep = "")
}
}
for (i in 1:length(vilasCreelLMB$timeEnd)) {
if (nchar(vilasCreelLMB$timeEnd[i])<4){
vilasCreelLMB$timeEnd[i]<-paste("0",vilasCreelLMB$timeEnd[i],sep = "")
}
}
#create dateSet Column
vilasCreelLMB$dateSet<-paste(vilasCreelLMB$dateSample,vilasCreelLMB$timeStart)
vilasCreelLMB$dateSet<-as.POSIXct(vilasCreelLMB$dateSet,format="%m/%d/%y %H%M")
#create dateSample Column
vilasCreelLMB$dateSample<-paste(vilasCreelLMB$dateSample,vilasCreelLMB$timeEnd)
vilasCreelLMB$dateSample<-as.POSIXct(vilasCreelLMB$dateSample,format="%m/%d/%y %H%M")
#modifying notFishAmt to time
#divide time to introduce decimal between hrs and mins
for (i in 1:length(vilasCreelLMB$notFishingAmt)){
vilasCreelLMB$notFishingAmt[i]<-(vilasCreelLMB$notFishingAmt[i]/100)
}
#create object for notFishingAmt data; turn
#create object for notFishingAmt data; turn values into characters
notFish<-vilasCreelLMB$notFishingAmt
notFish<-as.character(notFish)
notFishsplit<-notFish
for(i in 1:length(notFish)){
if (nchar(notFish[i])>1){
notFishsplit[i]<-strsplit(notFish[i],split = "\\.")
}
}
View(notFishsplit)
for (i in 1:length(notFishsplit)) {
if (nchar(notFishsplit[i])<2){
notFishsplit[i]<-paste("0",notFishsplit,sep = "")
}
}
View(notFishsplit)
creelLMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W12",]
creelSMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W11",]
#pulling out vilas county creel data
vilasCreelLMB<-creelLMB[creelLMB$county=="VILAS",]
vilasCreelSMB<-creelSMB[creelSMB$county=="VILAS",]
#selecting columns of creel data needed
vilasCreelLMB<-vilasCreelLMB[,c(1,2,3,6,12,18,25,26,30,36,37,38)]
vilasCreelSMB<-vilasCreelSMB[,c(1,2,3,6,12,18,25,26,30,36,37,38)]
#remove NA's
vilasCreelLMB<-vilasCreelLMB[is.na(vilasCreelLMB$WBIC)==FALSE,]
vilasCreelSMB<-vilasCreelSMB[is.na(vilasCreelSMB$WBIC)==FALSE,]
#selecting for rows with by fishedPerct
vilasCreelLMB<-vilasCreelLMB[vilasCreelLMB$fishedPerc!=0,]
vilasCreelSMB<-vilasCreelSMB[vilasCreelSMB$fishedPerc!=0,]
#reformating Date Columns
#adding 0 character to 3-digit times
for (i in 1:length(vilasCreelLMB$timeStart)) {
if (nchar(vilasCreelLMB$timeStart[i])<4){
vilasCreelLMB$timeStart[i]<-paste("0",vilasCreelLMB$timeStart[i],sep = "")
}
}
for (i in 1:length(vilasCreelLMB$timeEnd)) {
if (nchar(vilasCreelLMB$timeEnd[i])<4){
vilasCreelLMB$timeEnd[i]<-paste("0",vilasCreelLMB$timeEnd[i],sep = "")
}
}
#create dateSet Column
vilasCreelLMB$dateSet<-paste(vilasCreelLMB$dateSample,vilasCreelLMB$timeStart)
vilasCreelLMB$dateSet<-as.POSIXct(vilasCreelLMB$dateSet,format="%m/%d/%y %H%M")
#create dateSample Column
vilasCreelLMB$dateSample<-paste(vilasCreelLMB$dateSample,vilasCreelLMB$timeEnd)
vilasCreelLMB$dateSample<-as.POSIXct(vilasCreelLMB$dateSample,format="%m/%d/%y %H%M")
#modifying notFishAmt to time
#divide time to introduce decimal between hrs and mins
for (i in 1:length(vilasCreelLMB$notFishingAmt)){
vilasCreelLMB$notFishingAmt[i]<-(vilasCreelLMB$notFishingAmt[i]/100)
}
#create object for notFishingAmt data; turn values into characters
notFish<-vilasCreelLMB$notFishingAmt
notFish<-as.character(notFish)
notFishsplit<-notFish
for (i in 1:length(notFishsplit)) {
if (nchar(notFishsplit[i])=="0"){
notFishsplit[i]<-paste("0",notFishsplit,sep = "")
}
}
for (i in 1:length(notFish)) {
if (notFishs[i])=="0"){
notFish[i]<-paste("0",notFish,sep = "")
}
}
for (i in 1:length(notFish)) {
if (notFishs[i]=="0"){
notFish[i]<-paste("0",notFish,sep = "")
}
}
if (notFish[i]=="0"){
notFish[i]<-paste("0",notFish,sep = "")
}
for (i in 1:length(notFish)) {
if (notFish[i]=="0"){
notFish[i]<-paste("0",notFish[i],sep = "")
}
}
for(i in 1:length(notFish)){
if (nchar(notFish[i])>2){
notFishsplit[i]<-strsplit(notFish[i],split = "\\.")
}
}
View(notFishsplit)
vilasCreelLMB$notFishingSplit[i]<-notFishsplit[i]
View(vilasCreelLMB)
for(i in 1:length(notFish)){
if (nchar(notFish[i])>2){
vilasCreelLMB$notFishsplit[i]<-strsplit(notFish[i],split = "\\.")
}
}
#coverting notFishsplit to matrix
notFishsplit<-matrix(unlist(notFishsplit),ncol = 1,byrow = T)
#coverting notFishsplit to matrix
notFish<-matrix(unlist(notFishs),ncol = 1,byrow = T)
#coverting notFishsplit to matrix
notFish<-matrix(unlist(notFish),ncol = 1,byrow = T)
View(notFish)
for(i in 1:length(notFish)){
if (nchar(notFish[i])>2){
notFishsplit[i]<-strsplit(notFish[i],split = "\\.")
}
}
View(notFishsplit)
View(notFish)
View(notFishsplit)
creelLMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W12",]
creelSMB<-creelFishint1VO[creelFishint1VO$fishSpeciesCode=="W11",]
#pulling out vilas county creel data
vilasCreelLMB<-creelLMB[creelLMB$county=="VILAS",]
vilasCreelSMB<-creelSMB[creelSMB$county=="VILAS",]
#selecting columns of creel data needed
vilasCreelLMB<-vilasCreelLMB[,c(1,2,3,6,12,18,25,26,30,36,37,38)]
vilasCreelSMB<-vilasCreelSMB[,c(1,2,3,6,12,18,25,26,30,36,37,38)]
#remove NA's
vilasCreelLMB<-vilasCreelLMB[is.na(vilasCreelLMB$WBIC)==FALSE,]
vilasCreelSMB<-vilasCreelSMB[is.na(vilasCreelSMB$WBIC)==FALSE,]
#selecting for rows with by fishedPerct
vilasCreelLMB<-vilasCreelLMB[vilasCreelLMB$fishedPerc!=0,]
vilasCreelSMB<-vilasCreelSMB[vilasCreelSMB$fishedPerc!=0,]
#reformating Date Columns
#adding 0 character to 3-digit times
for (i in 1:length(vilasCreelLMB$timeStart)) {
if (nchar(vilasCreelLMB$timeStart[i])<4){
vilasCreelLMB$timeStart[i]<-paste("0",vilasCreelLMB$timeStart[i],sep = "")
}
}
for (i in 1:length(vilasCreelLMB$timeEnd)) {
if (nchar(vilasCreelLMB$timeEnd[i])<4){
vilasCreelLMB$timeEnd[i]<-paste("0",vilasCreelLMB$timeEnd[i],sep = "")
}
}
#create dateSet Column
vilasCreelLMB$dateSet<-paste(vilasCreelLMB$dateSample,vilasCreelLMB$timeStart)
vilasCreelLMB$dateSet<-as.POSIXct(vilasCreelLMB$dateSet,format="%m/%d/%y %H%M")
#create dateSample Column
vilasCreelLMB$dateSample<-paste(vilasCreelLMB$dateSample,vilasCreelLMB$timeEnd)
vilasCreelLMB$dateSample<-as.POSIXct(vilasCreelLMB$dateSample,format="%m/%d/%y %H%M")
#modifying notFishAmt to time
#divide time to introduce decimal between hrs and mins
for (i in 1:length(vilasCreelLMB$notFishingAmt)){
vilasCreelLMB$notFishingAmt[i]<-(vilasCreelLMB$notFishingAmt[i]/100)
}
?separate()
#PACKAGES
library(dplyr)
?separate()
library(tidyr)
install.packages(c("backports", "BH", "bit", "blob", "cli", "curl", "DBI", "digest", "dplyr", "ellipsis", "fansi", "mime", "pillar", "pkgconfig", "plyr", "prettyunits", "purrr", "R6", "Rcpp", "RgoogleMaps", "rlang", "RSQLite", "scales", "stringi", "tidyr", "tidyselect"))
library(tidyr)
?separate()
install.packages("deSolve")
